import axios from "axios";
import { v4 as uuid } from "uuid";
import {
  Params,
  Data,
  Service,
  Options,
  Headers,
  StringId,
  NameSpaces,
} from "./types/index";

export default class Repzo {
  private svAPIEndpoint: string;
  headers: Headers;
  constructor(apiKey: string, options?: Options) {
    this.svAPIEndpoint =
      !options?.env || options?.env == "production"
        ? "https://sv.api.repzo.me"
        : options?.env == "staging"
        ? "https://staging.sv.api.repzo.me"
        : options?.env == "local"
        ? "http://localhost:3030"
        : "";

    this.headers = {
      "api-key": apiKey,
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    if (options?.headers) Object.assign(this.headers, options.headers);
  }

  private async _fetch(baseUrl: string, path: string, params?: Params) {
    let res = await axios.get(baseUrl + path, {
      params,
      headers: this.headers,
    });
    return res.data;
  }

  private async _create(
    baseUrl: string,
    path: string,
    body: Data,
    params?: Params
  ) {
    let res = await axios.post(baseUrl + path, body, {
      params,
      headers: this.headers,
    });
    return res.data;
  }

  private async _update(
    baseUrl: string,
    path: string,
    body: Data,
    params?: Params
  ) {
    let res = await axios.put(baseUrl + path, body, {
      params,
      headers: this.headers,
    });
    return res.data;
  }

  private async _delete(baseUrl: string, path: string, params?: Params) {
    let res = await axios.delete(baseUrl + path, {
      params,
      headers: this.headers,
    });
    return res.data;
  }

  client = {
    _path: "/client",
    find: async (
      params?: Service.Client.Find.Params
    ): Promise<Service.Client.Find.Result> => {
      let res: Service.Client.Find.Result = await this._fetch(
        this.svAPIEndpoint,
        this.client._path,
        params
      );
      return res;
    },

    get: async (
      id: Service.Client.Get.ID,
      params?: Service.Client.Get.Params
    ): Promise<Service.Client.Get.Result> => {
      return await this._fetch(
        this.svAPIEndpoint,
        this.client._path + `/${id}`,
        params
      );
    },

    create: async (
      body: Service.Client.Create.Body
    ): Promise<Service.Client.Create.Result> => {
      let res = await this._create(this.svAPIEndpoint, this.client._path, body);
      return res;
    },

    update: async (
      id: Service.Client.Update.ID,
      body: Service.Client.Update.Body
    ): Promise<Service.Client.Update.Result> => {
      let res: Service.Client.Update.Result = await this._update(
        this.svAPIEndpoint,
        this.client._path + `/${id}`,
        body
      );
      return res;
    },

    remove: async (
      id: Service.Client.Remove.ID
    ): Promise<Service.Client.Remove.Result> => {
      let res: Service.Client.Remove.Result = await this._delete(
        this.svAPIEndpoint,
        this.client._path + `/${id}`
      );
      return res;
    },
  };

  product = {
    _path: "/product",
    find: async (
      params?: Service.Product.Find.Params
    ): Promise<Service.Product.Find.Result> => {
      let res: Service.Product.Find.Result = await this._fetch(
        this.svAPIEndpoint,
        this.product._path,
        params
      );
      return res;
    },

    get: async (
      id: Service.Product.Get.ID,
      params?: Service.Product.Get.Params
    ): Promise<Service.Product.Get.Result> => {
      return await this._fetch(
        this.svAPIEndpoint,
        this.product._path + `/${id}`,
        params
      );
    },

    create: async (
      body: Service.Product.Create.Body
    ): Promise<Service.Product.Create.Result> => {
      let res = await this._create(
        this.svAPIEndpoint,
        this.product._path,
        body
      );
      return res;
    },

    update: async (
      id: Service.Product.Update.ID,
      body: Service.Product.Update.Body
    ): Promise<Service.Product.Update.Result> => {
      let res: Service.Product.Update.Result = await this._update(
        this.svAPIEndpoint,
        this.product._path + `/${id}`,
        body
      );
      return res;
    },

    remove: async (
      id: Service.Product.Remove.ID
    ): Promise<Service.Product.Remove.Result> => {
      let res: Service.Product.Remove.Result = await this._delete(
        this.svAPIEndpoint,
        this.product._path + `/${id}`
      );
      return res;
    },
  };

  variant = {
    _path: "/variant",
    find: async (
      params?: Service.Variant.Find.Params
    ): Promise<Service.Variant.Find.Result> => {
      let res: Service.Variant.Find.Result = await this._fetch(
        this.svAPIEndpoint,
        this.variant._path,
        params
      );
      return res;
    },

    get: async (
      id: Service.Variant.Get.ID,
      params?: Service.Variant.Get.Params
    ): Promise<Service.Variant.Get.Result> => {
      return await this._fetch(
        this.svAPIEndpoint,
        this.variant._path + `/${id}`,
        params
      );
    },

    create: async (
      body: Service.Variant.Create.Body
    ): Promise<Service.Variant.Create.Result> => {
      let res = await this._create(
        this.svAPIEndpoint,
        this.variant._path,
        body
      );
      return res;
    },

    update: async (
      id: Service.Variant.Update.ID,
      body: Service.Variant.Update.Body
    ): Promise<Service.Variant.Update.Result> => {
      let res: Service.Variant.Update.Result = await this._update(
        this.svAPIEndpoint,
        this.variant._path + `/${id}`,
        body
      );
      return res;
    },

    remove: async (
      id: Service.Variant.Remove.ID
    ): Promise<Service.Variant.Remove.Result> => {
      let res: Service.Variant.Remove.Result = await this._delete(
        this.svAPIEndpoint,
        this.variant._path + `/${id}`
      );
      return res;
    },
  };

  category = {
    _path: "/product-category",
    find: async (
      params?: Service.Category.Find.Params
    ): Promise<Service.Category.Find.Result> => {
      let res: Service.Category.Find.Result = await this._fetch(
        this.svAPIEndpoint,
        this.category._path,
        params
      );
      return res;
    },

    get: async (
      id: Service.Category.Get.ID
    ): Promise<Service.Category.Get.Result> => {
      return await this._fetch(
        this.svAPIEndpoint,
        this.category._path + `/${id}`
      );
    },

    create: async (
      body: Service.Category.Create.Body
    ): Promise<Service.Category.Create.Result> => {
      let res = await this._create(
        this.svAPIEndpoint,
        this.category._path,
        body
      );
      return res;
    },

    update: async (
      id: Service.Category.Update.ID,
      body: Service.Category.Update.Body
    ): Promise<Service.Category.Update.Result> => {
      let res: Service.Category.Update.Result = await this._update(
        this.svAPIEndpoint,
        this.category._path + `/${id}`,
        body
      );
      return res;
    },

    remove: async (
      id: Service.Category.Remove.ID
    ): Promise<Service.Category.Remove.Result> => {
      let res: Service.Category.Remove.Result = await this._delete(
        this.svAPIEndpoint,
        this.category._path + `/${id}`
      );
      return res;
    },
  };

  sub_category = {
    _path: "/product-sub-category",
    find: async (
      params?: Service.SubCategory.Find.Params
    ): Promise<Service.SubCategory.Find.Result> => {
      let res: Service.SubCategory.Find.Result = await this._fetch(
        this.svAPIEndpoint,
        this.sub_category._path,
        params
      );
      return res;
    },

    get: async (
      id: Service.SubCategory.Get.ID,
      params?: Service.SubCategory.Get.Params
    ): Promise<Service.SubCategory.Get.Result> => {
      return await this._fetch(
        this.svAPIEndpoint,
        this.sub_category._path + `/${id}`,
        params
      );
    },

    create: async (
      body: Service.SubCategory.Create.Body
    ): Promise<Service.SubCategory.Create.Result> => {
      let res = await this._create(
        this.svAPIEndpoint,
        this.sub_category._path,
        body
      );
      return res;
    },

    update: async (
      id: Service.SubCategory.Update.ID,
      body: Service.SubCategory.Update.Body
    ): Promise<Service.SubCategory.Update.Result> => {
      let res: Service.SubCategory.Update.Result = await this._update(
        this.svAPIEndpoint,
        this.sub_category._path + `/${id}`,
        body
      );
      return res;
    },

    remove: async (
      id: Service.SubCategory.Remove.ID
    ): Promise<Service.SubCategory.Remove.Result> => {
      let res: Service.SubCategory.Remove.Result = await this._delete(
        this.svAPIEndpoint,
        this.sub_category._path + `/${id}`
      );
      return res;
    },
  };

  brand = {
    _path: "/product-brand",
    find: async (
      params?: Service.Brand.Find.Params
    ): Promise<Service.Brand.Find.Result> => {
      let res: Service.Brand.Find.Result = await this._fetch(
        this.svAPIEndpoint,
        this.brand._path,
        params
      );
      return res;
    },

    get: async (
      id: Service.Brand.Get.ID
    ): Promise<Service.Brand.Get.Result> => {
      return await this._fetch(this.svAPIEndpoint, this.brand._path + `/${id}`);
    },

    create: async (
      body: Service.Brand.Create.Body
    ): Promise<Service.Brand.Create.Result> => {
      let res = await this._create(this.svAPIEndpoint, this.brand._path, body);
      return res;
    },

    update: async (
      id: Service.Brand.Update.ID,
      body: Service.Brand.Update.Body
    ): Promise<Service.Brand.Update.Result> => {
      let res: Service.Brand.Update.Result = await this._update(
        this.svAPIEndpoint,
        this.brand._path + `/${id}`,
        body
      );
      return res;
    },

    remove: async (
      id: Service.Brand.Remove.ID
    ): Promise<Service.Brand.Remove.Result> => {
      let res: Service.Brand.Remove.Result = await this._delete(
        this.svAPIEndpoint,
        this.brand._path + `/${id}`
      );
      return res;
    },
  };

  product_group = {
    _path: "/product-group",
    find: async (
      params?: Service.ProductGroup.Find.Params
    ): Promise<Service.ProductGroup.Find.Result> => {
      let res: Service.ProductGroup.Find.Result = await this._fetch(
        this.svAPIEndpoint,
        this.product_group._path,
        params
      );
      return res;
    },

    get: async (
      id: Service.ProductGroup.Get.ID
    ): Promise<Service.ProductGroup.Get.Result> => {
      return await this._fetch(
        this.svAPIEndpoint,
        this.product_group._path + `/${id}`
      );
    },

    create: async (
      body: Service.ProductGroup.Create.Body
    ): Promise<Service.ProductGroup.Create.Result> => {
      let res = await this._create(
        this.svAPIEndpoint,
        this.product_group._path,
        body
      );
      return res;
    },

    update: async (
      id: Service.ProductGroup.Update.ID,
      body: Service.ProductGroup.Update.Body
    ): Promise<Service.ProductGroup.Update.Result> => {
      let res: Service.ProductGroup.Update.Result = await this._update(
        this.svAPIEndpoint,
        this.product_group._path + `/${id}`,
        body
      );
      return res;
    },

    remove: async (
      id: Service.ProductGroup.Remove.ID
    ): Promise<Service.ProductGroup.Remove.Result> => {
      let res: Service.ProductGroup.Remove.Result = await this._delete(
        this.svAPIEndpoint,
        this.product_group._path + `/${id}`
      );
      return res;
    },
  };

  tax = {
    _path: "/tax",
    find: async (
      params?: Service.Tax.Find.Params
    ): Promise<Service.Tax.Find.Result> => {
      let res: Service.Tax.Find.Result = await this._fetch(
        this.svAPIEndpoint,
        this.tax._path,
        params
      );
      return res;
    },

    get: async (id: Service.Tax.Get.ID): Promise<Service.Tax.Get.Result> => {
      return await this._fetch(this.svAPIEndpoint, this.tax._path + `/${id}`);
    },

    create: async (
      body: Service.Tax.Create.Body
    ): Promise<Service.Tax.Create.Result> => {
      let res = await this._create(this.svAPIEndpoint, this.tax._path, body);
      return res;
    },

    update: async (
      id: Service.Tax.Update.ID,
      body: Service.Tax.Update.Body
    ): Promise<Service.Tax.Update.Result> => {
      let res: Service.Tax.Update.Result = await this._update(
        this.svAPIEndpoint,
        this.tax._path + `/${id}`,
        body
      );
      return res;
    },

    remove: async (
      id: Service.Tax.Remove.ID
    ): Promise<Service.Tax.Remove.Result> => {
      let res: Service.Tax.Remove.Result = await this._delete(
        this.svAPIEndpoint,
        this.tax._path + `/${id}`
      );
      return res;
    },
  };

  measureunit = {
    _path: "/measureunits",
    find: async (
      params?: Service.MeasureUnit.Find.Params
    ): Promise<Service.MeasureUnit.Find.Result> => {
      let res: Service.MeasureUnit.Find.Result = await this._fetch(
        this.svAPIEndpoint,
        this.measureunit._path,
        params
      );
      return res;
    },

    get: async (
      id: Service.MeasureUnit.Get.ID
    ): Promise<Service.MeasureUnit.Get.Result> => {
      return await this._fetch(
        this.svAPIEndpoint,
        this.measureunit._path + `/${id}`
      );
    },

    create: async (
      body: Service.MeasureUnit.Create.Body
    ): Promise<Service.MeasureUnit.Create.Result> => {
      let res = await this._create(
        this.svAPIEndpoint,
        this.measureunit._path,
        body
      );
      return res;
    },

    update: async (
      id: Service.MeasureUnit.Update.ID,
      body: Service.MeasureUnit.Update.Body
    ): Promise<Service.MeasureUnit.Update.Result> => {
      let res: Service.MeasureUnit.Update.Result = await this._update(
        this.svAPIEndpoint,
        this.measureunit._path + `/${id}`,
        body
      );
      return res;
    },

    remove: async (
      id: Service.MeasureUnit.Remove.ID
    ): Promise<Service.MeasureUnit.Remove.Result> => {
      let res: Service.MeasureUnit.Remove.Result = await this._delete(
        this.svAPIEndpoint,
        this.measureunit._path + `/${id}`
      );
      return res;
    },
  };

  measureunitFamily = {
    _path: "/measureunit-family",
    find: async (
      params?: Service.MeasureUnitFamily.Find.Params
    ): Promise<Service.MeasureUnitFamily.Find.Result> => {
      let res: Service.MeasureUnitFamily.Find.Result = await this._fetch(
        this.svAPIEndpoint,
        this.measureunitFamily._path,
        params
      );
      return res;
    },

    get: async (
      id: Service.MeasureUnitFamily.Get.ID
    ): Promise<Service.MeasureUnitFamily.Get.Result> => {
      return await this._fetch(
        this.svAPIEndpoint,
        this.measureunitFamily._path + `/${id}`
      );
    },

    create: async (
      body: Service.MeasureUnitFamily.Create.Body
    ): Promise<Service.MeasureUnitFamily.Create.Result> => {
      let res = await this._create(
        this.svAPIEndpoint,
        this.measureunitFamily._path,
        body
      );
      return res;
    },

    update: async (
      id: Service.MeasureUnitFamily.Update.ID,
      body: Service.MeasureUnitFamily.Update.Body
    ): Promise<Service.MeasureUnitFamily.Update.Result> => {
      let res: Service.MeasureUnitFamily.Update.Result = await this._update(
        this.svAPIEndpoint,
        this.measureunitFamily._path + `/${id}`,
        body
      );
      return res;
    },

    remove: async (
      id: Service.MeasureUnitFamily.Remove.ID
    ): Promise<Service.MeasureUnitFamily.Remove.Result> => {
      let res: Service.MeasureUnitFamily.Remove.Result = await this._delete(
        this.svAPIEndpoint,
        this.measureunitFamily._path + `/${id}`
      );
      return res;
    },
  };

  media = {
    _path: "/media",
    find: async (
      params?: Service.Media.Find.Params
    ): Promise<Service.Media.Find.Result> => {
      let res: Service.Media.Find.Result = await this._fetch(
        this.svAPIEndpoint,
        this.media._path,
        params
      );
      return res;
    },

    get: async (
      id: Service.Media.Get.ID
    ): Promise<Service.Media.Get.Result> => {
      return await this._fetch(this.svAPIEndpoint, this.media._path + `/${id}`);
    },

    create: async (
      body: Service.Media.Create.Body
    ): Promise<Service.Media.Create.Result> => {
      let res = await this._create(this.svAPIEndpoint, this.media._path, body);
      return res;
    },

    update: async (
      id: Service.Media.Update.ID,
      body: Service.Media.Update.Body
    ): Promise<Service.Media.Update.Result> => {
      let res: Service.Media.Update.Result = await this._update(
        this.svAPIEndpoint,
        this.media._path + `/${id}`,
        body
      );
      return res;
    },

    remove: async (
      id: Service.Media.Remove.ID
    ): Promise<Service.Media.Remove.Result> => {
      let res: Service.Media.Remove.Result = await this._delete(
        this.svAPIEndpoint,
        this.media._path + `/${id}`
      );
      return res;
    },
  };

  priceList = {
    _path: "/pricelists",
    find: async (
      params?: Service.PriceList.Find.Params
    ): Promise<Service.PriceList.Find.Result> => {
      let res: Service.PriceList.Find.Result = await this._fetch(
        this.svAPIEndpoint,
        this.priceList._path,
        params
      );
      return res;
    },

    get: async (
      id: Service.PriceList.Get.ID
    ): Promise<Service.PriceList.Get.Result> => {
      return await this._fetch(
        this.svAPIEndpoint,
        this.priceList._path + `/${id}`
      );
    },

    create: async (
      body: Service.PriceList.Create.Body
    ): Promise<Service.PriceList.Create.Result> => {
      let res = await this._create(
        this.svAPIEndpoint,
        this.priceList._path,
        body
      );
      return res;
    },

    update: async (
      id: Service.PriceList.Update.ID,
      body: Service.PriceList.Update.Body
    ): Promise<Service.PriceList.Update.Result> => {
      let res: Service.PriceList.Update.Result = await this._update(
        this.svAPIEndpoint,
        this.priceList._path + `/${id}`,
        body
      );
      return res;
    },

    remove: async (
      id: Service.PriceList.Remove.ID
    ): Promise<Service.PriceList.Remove.Result> => {
      let res: Service.PriceList.Remove.Result = await this._delete(
        this.svAPIEndpoint,
        this.priceList._path + `/${id}`
      );
      return res;
    },
  };

  priceListItem = {
    _path: "/pricelistsitems",
    find: async (
      params?: Service.PriceListItem.Find.Params
    ): Promise<Service.PriceListItem.Find.Result> => {
      let res: Service.PriceListItem.Find.Result = await this._fetch(
        this.svAPIEndpoint,
        this.priceListItem._path,
        params
      );
      return res;
    },

    get: async (
      id: Service.PriceListItem.Get.ID
    ): Promise<Service.PriceListItem.Get.Result> => {
      return await this._fetch(
        this.svAPIEndpoint,
        this.priceListItem._path + `/${id}`
      );
    },

    create: async (
      body: Service.PriceListItem.Create.Body
    ): Promise<Service.PriceListItem.Create.Result> => {
      let res = await this._create(
        this.svAPIEndpoint,
        this.priceListItem._path,
        body
      );
      return res;
    },

    update: async (
      id: Service.PriceListItem.Update.ID,
      body: Service.PriceListItem.Update.Body
    ): Promise<Service.PriceListItem.Update.Result> => {
      let res: Service.PriceListItem.Update.Result = await this._update(
        this.svAPIEndpoint,
        this.priceListItem._path + `/${id}`,
        body
      );
      return res;
    },

    remove: async (
      id: Service.PriceListItem.Remove.ID
    ): Promise<Service.PriceListItem.Remove.Result> => {
      let res: Service.PriceListItem.Remove.Result = await this._delete(
        this.svAPIEndpoint,
        this.priceListItem._path + `/${id}`
      );
      return res;
    },
  };

  team = {
    _path: "/teams",
    find: async (
      params?: Service.Team.Find.Params
    ): Promise<Service.Team.Find.Result> => {
      let res: Service.Team.Find.Result = await this._fetch(
        this.svAPIEndpoint,
        this.team._path,
        params
      );
      return res;
    },

    get: async (id: Service.Team.Get.ID): Promise<Service.Team.Get.Result> => {
      return await this._fetch(this.svAPIEndpoint, this.team._path + `/${id}`);
    },

    create: async (
      body: Service.Team.Create.Body
    ): Promise<Service.Team.Create.Result> => {
      let res = await this._create(this.svAPIEndpoint, this.team._path, body);
      return res;
    },

    update: async (
      id: Service.Team.Update.ID,
      body: Service.Team.Update.Body
    ): Promise<Service.Team.Update.Result> => {
      let res: Service.Team.Update.Result = await this._update(
        this.svAPIEndpoint,
        this.team._path + `/${id}`,
        body
      );
      return res;
    },

    remove: async (
      id: Service.Team.Remove.ID
    ): Promise<Service.Team.Remove.Result> => {
      let res: Service.Team.Remove.Result = await this._delete(
        this.svAPIEndpoint,
        this.team._path + `/${id}`
      );
      return res;
    },
  };

  rep = {
    _path: "/rep",
    find: async (
      params?: Service.Rep.Find.Params
    ): Promise<Service.Rep.Find.Result> => {
      let res: Service.Rep.Find.Result = await this._fetch(
        this.svAPIEndpoint,
        this.rep._path,
        params
      );
      return res;
    },

    get: async (
      id: Service.Rep.Get.ID,
      params?: Service.Client.Get.Params
    ): Promise<Service.Rep.Get.Result> => {
      return await this._fetch(
        this.svAPIEndpoint,
        this.rep._path + `/${id}`,
        params
      );
    },

    create: async (
      body: Service.Rep.Create.Body
    ): Promise<Service.Rep.Create.Result> => {
      let res = await this._create(this.svAPIEndpoint, this.rep._path, body);
      return res;
    },

    update: async (
      id: Service.Rep.Update.ID,
      body: Service.Rep.Update.Body
    ): Promise<Service.Rep.Update.Result> => {
      let res: Service.Rep.Update.Result = await this._update(
        this.svAPIEndpoint,
        this.rep._path + `/${id}`,
        body
      );
      return res;
    },

    remove: async (
      id: Service.Rep.Remove.ID
    ): Promise<Service.Rep.Remove.Result> => {
      let res: Service.Rep.Remove.Result = await this._delete(
        this.svAPIEndpoint,
        this.rep._path + `/${id}`
      );
      return res;
    },
  };

  tag = {
    _path: "/tag",
    find: async (
      params?: Service.Tag.Find.Params
    ): Promise<Service.Tag.Find.Result> => {
      let res: Service.Tag.Find.Result = await this._fetch(
        this.svAPIEndpoint,
        this.tag._path,
        params
      );
      return res;
    },

    get: async (id: Service.Tag.Get.ID): Promise<Service.Tag.Get.Result> => {
      return await this._fetch(this.svAPIEndpoint, this.tag._path + `/${id}`);
    },

    create: async (
      body: Service.Tag.Create.Body
    ): Promise<Service.Tag.Create.Result> => {
      let res = await this._create(this.svAPIEndpoint, this.tag._path, body);
      return res;
    },

    update: async (
      id: Service.Tag.Update.ID,
      body: Service.Tag.Update.Body
    ): Promise<Service.Tag.Update.Result> => {
      let res: Service.Tag.Update.Result = await this._update(
        this.svAPIEndpoint,
        this.tag._path + `/${id}`,
        body
      );
      return res;
    },

    remove: async (
      id: Service.Tag.Remove.ID
    ): Promise<Service.Tag.Remove.Result> => {
      let res: Service.Tag.Remove.Result = await this._delete(
        this.svAPIEndpoint,
        this.tag._path + `/${id}`
      );
      return res;
    },
  };

  warehouse = {
    _path: "/warehouse",
    find: async (
      params?: Service.Warehouse.Find.Params
    ): Promise<Service.Warehouse.Find.Result> => {
      let res: Service.Warehouse.Find.Result = await this._fetch(
        this.svAPIEndpoint,
        this.warehouse._path,
        params
      );
      return res;
    },

    get: async (
      id: Service.Warehouse.Get.ID
    ): Promise<Service.Warehouse.Get.Result> => {
      return await this._fetch(
        this.svAPIEndpoint,
        this.warehouse._path + `/${id}`
      );
    },

    create: async (
      body: Service.Warehouse.Create.Body
    ): Promise<Service.Warehouse.Create.Result> => {
      let res = await this._create(
        this.svAPIEndpoint,
        this.warehouse._path,
        body
      );
      return res;
    },

    update: async (
      id: Service.Warehouse.Update.ID,
      body: Service.Warehouse.Update.Body
    ): Promise<Service.Warehouse.Update.Result> => {
      let res: Service.Warehouse.Update.Result = await this._update(
        this.svAPIEndpoint,
        this.warehouse._path + `/${id}`,
        body
      );
      return res;
    },

    remove: async (
      id: Service.Warehouse.Remove.ID
    ): Promise<Service.Warehouse.Remove.Result> => {
      let res: Service.Warehouse.Remove.Result = await this._delete(
        this.svAPIEndpoint,
        this.warehouse._path + `/${id}`
      );
      return res;
    },
  };

  channel = {
    _path: "/client-channel",
    find: async (
      params?: Service.Channel.Find.Params
    ): Promise<Service.Channel.Find.Result> => {
      let res: Service.Channel.Find.Result = await this._fetch(
        this.svAPIEndpoint,
        this.channel._path,
        params
      );
      return res;
    },

    get: async (
      id: Service.Channel.Get.ID
    ): Promise<Service.Channel.Get.Result> => {
      return await this._fetch(
        this.svAPIEndpoint,
        this.channel._path + `/${id}`
      );
    },

    create: async (
      body: Service.Channel.Create.Body
    ): Promise<Service.Channel.Create.Result> => {
      let res = await this._create(
        this.svAPIEndpoint,
        this.channel._path,
        body
      );
      return res;
    },

    update: async (
      id: Service.Channel.Update.ID,
      body: Service.Channel.Update.Body
    ): Promise<Service.Channel.Update.Result> => {
      let res: Service.Channel.Update.Result = await this._update(
        this.svAPIEndpoint,
        this.channel._path + `/${id}`,
        body
      );
      return res;
    },

    remove: async (
      id: Service.Channel.Remove.ID
    ): Promise<Service.Channel.Remove.Result> => {
      let res: Service.Channel.Remove.Result = await this._delete(
        this.svAPIEndpoint,
        this.channel._path + `/${id}`
      );
      return res;
    },
  };

  paymentTerm = {
    _path: "/paymentterms",
    find: async (
      params?: Service.PaymentTerm.Find.Params
    ): Promise<Service.PaymentTerm.Find.Result> => {
      let res: Service.PaymentTerm.Find.Result = await this._fetch(
        this.svAPIEndpoint,
        this.paymentTerm._path,
        params
      );
      return res;
    },

    get: async (
      id: Service.PaymentTerm.Get.ID
    ): Promise<Service.PaymentTerm.Get.Result> => {
      return await this._fetch(
        this.svAPIEndpoint,
        this.paymentTerm._path + `/${id}`
      );
    },

    create: async (
      body: Service.PaymentTerm.Create.Body
    ): Promise<Service.PaymentTerm.Create.Result> => {
      let res = await this._create(
        this.svAPIEndpoint,
        this.paymentTerm._path,
        body
      );
      return res;
    },

    update: async (
      id: Service.PaymentTerm.Update.ID,
      body: Service.PaymentTerm.Update.Body
    ): Promise<Service.PaymentTerm.Update.Result> => {
      let res: Service.PaymentTerm.Update.Result = await this._update(
        this.svAPIEndpoint,
        this.paymentTerm._path + `/${id}`,
        body
      );
      return res;
    },

    remove: async (
      id: Service.PaymentTerm.Remove.ID
    ): Promise<Service.PaymentTerm.Remove.Result> => {
      let res: Service.PaymentTerm.Remove.Result = await this._delete(
        this.svAPIEndpoint,
        this.paymentTerm._path + `/${id}`
      );
      return res;
    },
  };

  bank = {
    _path: "/banks",
    find: async (
      params?: Service.Bank.Find.Params
    ): Promise<Service.Bank.Find.Result> => {
      let res: Service.Bank.Find.Result = await this._fetch(
        this.svAPIEndpoint,
        this.bank._path,
        params
      );
      return res;
    },

    get: async (id: Service.Bank.Get.ID): Promise<Service.Bank.Get.Result> => {
      return await this._fetch(this.svAPIEndpoint, this.bank._path + `/${id}`);
    },

    create: async (
      body: Service.Bank.Create.Body
    ): Promise<Service.Bank.Create.Result> => {
      let res = await this._create(this.svAPIEndpoint, this.bank._path, body);
      return res;
    },

    update: async (
      id: Service.Bank.Update.ID,
      body: Service.Bank.Update.Body
    ): Promise<Service.Bank.Update.Result> => {
      let res: Service.Bank.Update.Result = await this._update(
        this.svAPIEndpoint,
        this.bank._path + `/${id}`,
        body
      );
      return res;
    },
  };

  bank_list = {
    _path: "/bankslists",
    find: async (
      params?: Service.BankList.Find.Params
    ): Promise<Service.BankList.Find.Result> => {
      let res: Service.BankList.Find.Result = await this._fetch(
        this.svAPIEndpoint,
        this.bank_list._path,
        params
      );
      return res;
    },

    get: async (
      id: Service.BankList.Get.ID
    ): Promise<Service.BankList.Get.Result> => {
      return await this._fetch(
        this.svAPIEndpoint,
        this.bank_list._path + `/${id}`
      );
    },

    create: async (
      body: Service.BankList.Create.Body
    ): Promise<Service.BankList.Create.Result> => {
      let res = await this._create(
        this.svAPIEndpoint,
        this.bank_list._path,
        body
      );
      return res;
    },

    update: async (
      id: Service.BankList.Update.ID,
      body: Service.BankList.Update.Body
    ): Promise<Service.BankList.Update.Result> => {
      let res: Service.BankList.Update.Result = await this._update(
        this.svAPIEndpoint,
        this.bank_list._path + `/${id}`,
        body
      );
      return res;
    },
  };

  customStatus = {
    _path: "/custom-status",
    find: async (
      params?: Service.CustomStatus.Find.Params
    ): Promise<Service.CustomStatus.Find.Result> => {
      let res: Service.CustomStatus.Find.Result = await this._fetch(
        this.svAPIEndpoint,
        this.customStatus._path,
        params
      );
      return res;
    },

    get: async (
      id: Service.CustomStatus.Get.ID
    ): Promise<Service.CustomStatus.Get.Result> => {
      return await this._fetch(
        this.svAPIEndpoint,
        this.customStatus._path + `/${id}`
      );
    },

    create: async (
      body: Service.CustomStatus.Create.Body
    ): Promise<Service.CustomStatus.Create.Result> => {
      let res = await this._create(
        this.svAPIEndpoint,
        this.customStatus._path,
        body
      );
      return res;
    },

    update: async (
      id: Service.CustomStatus.Update.ID,
      body: Service.CustomStatus.Update.Body
    ): Promise<Service.CustomStatus.Update.Result> => {
      let res: Service.CustomStatus.Update.Result = await this._update(
        this.svAPIEndpoint,
        this.customStatus._path + `/${id}`,
        body
      );
      return res;
    },

    remove: async (
      id: Service.CustomStatus.Remove.ID
    ): Promise<Service.CustomStatus.Remove.Result> => {
      let res: Service.CustomStatus.Remove.Result = await this._delete(
        this.svAPIEndpoint,
        this.customStatus._path + `/${id}`
      );
      return res;
    },
  };

  invoice = {
    _path: "/fullinvoices",
    find: async (
      params?: Service.FullInvoice.Find.Params
    ): Promise<Service.FullInvoice.Find.Result> => {
      let res: Service.FullInvoice.Find.Result = await this._fetch(
        this.svAPIEndpoint,
        this.invoice._path,
        params
      );
      return res;
    },

    get: async (
      id: Service.FullInvoice.Get.ID,
      params?: Service.FullInvoice.Get.Params
    ): Promise<Service.FullInvoice.Get.Result> => {
      return await this._fetch(
        this.svAPIEndpoint,
        this.invoice._path + `/${id}`,
        params
      );
    },

    create: async (
      body: Service.FullInvoice.Create.Body
    ): Promise<Service.FullInvoice.Create.Result> => {
      let res = await this._create(
        this.svAPIEndpoint,
        this.invoice._path,
        body
      );
      return res;
    },

    update: async (
      id: Service.FullInvoice.Update.ID,
      body: Service.FullInvoice.Update.Body
    ): Promise<Service.FullInvoice.Update.Result> => {
      let res: Service.FullInvoice.Update.Result = await this._update(
        this.svAPIEndpoint,
        this.invoice._path + `/${id}`,
        body
      );
      return res;
    },
  };

  proforma = {
    _path: "/proforma",
    find: async (
      params?: Service.Proforma.Find.Params
    ): Promise<Service.Proforma.Find.Result> => {
      let res: Service.Proforma.Find.Result = await this._fetch(
        this.svAPIEndpoint,
        this.proforma._path,
        params
      );
      return res;
    },

    get: async (
      id: Service.Proforma.Get.ID,
      params?: Service.Proforma.Get.Params
    ): Promise<Service.Proforma.Get.Result> => {
      return await this._fetch(
        this.svAPIEndpoint,
        this.proforma._path + `/${id}`,
        params
      );
    },

    create: async (
      body: Service.Proforma.Create.Body
    ): Promise<Service.Proforma.Create.Result> => {
      let res = await this._create(
        this.svAPIEndpoint,
        this.proforma._path,
        body
      );
      return res;
    },

    update: async (
      id: Service.Proforma.Update.ID,
      body: Service.Proforma.Update.Body
    ): Promise<Service.Proforma.Update.Result> => {
      let res: Service.Proforma.Update.Result = await this._update(
        this.svAPIEndpoint,
        this.proforma._path + `/${id}`,
        body
      );
      return res;
    },
  };

  payment = {
    _path: "/payments",
    find: async (
      params?: Service.Payment.Find.Params
    ): Promise<Service.Payment.Find.Result> => {
      let res: Service.Payment.Find.Result = await this._fetch(
        this.svAPIEndpoint,
        this.payment._path,
        params
      );
      return res;
    },

    get: async (
      id: Service.Payment.Get.ID,
      params?: Service.Payment.Get.Params
    ): Promise<Service.Payment.Get.Result> => {
      return await this._fetch(
        this.svAPIEndpoint,
        this.payment._path + `/${id}`,
        params
      );
    },

    create: async (
      body: Service.Payment.Create.Body
    ): Promise<Service.Payment.Create.Result> => {
      let res = await this._create(
        this.svAPIEndpoint,
        this.payment._path,
        body
      );
      return res;
    },

    update: async (
      id: Service.Payment.Update.ID,
      body: Service.Payment.Update.Body
    ): Promise<Service.Payment.Update.Result> => {
      let res: Service.Payment.Update.Result = await this._update(
        this.svAPIEndpoint,
        this.payment._path + `/${id}`,
        body
      );
      return res;
    },
  };

  refund = {
    _path: "/refund",
    find: async (
      params?: Service.Refund.Find.Params
    ): Promise<Service.Refund.Find.Result> => {
      let res: Service.Refund.Find.Result = await this._fetch(
        this.svAPIEndpoint,
        this.refund._path,
        params
      );
      return res;
    },

    get: async (
      id: Service.Refund.Get.ID,
      params?: Service.Refund.Get.Params
    ): Promise<Service.Refund.Get.Result> => {
      return await this._fetch(
        this.svAPIEndpoint,
        this.refund._path + `/${id}`,
        params
      );
    },

    create: async (
      body: Service.Refund.Create.Body
    ): Promise<Service.Refund.Create.Result> => {
      let res = await this._create(this.svAPIEndpoint, this.refund._path, body);
      return res;
    },

    update: async (
      id: Service.Refund.Update.ID,
      body: Service.Refund.Update.Body
    ): Promise<Service.Refund.Update.Result> => {
      let res: Service.Refund.Update.Result = await this._update(
        this.svAPIEndpoint,
        this.refund._path + `/${id}`,
        body
      );
      return res;
    },
  };

  transfer = {
    _path: "/transfer",
    find: async (
      params?: Service.Transfer.Find.Params
    ): Promise<Service.Transfer.Find.Result> => {
      let res: Service.Transfer.Find.Result = await this._fetch(
        this.svAPIEndpoint,
        this.transfer._path,
        params
      );
      return res;
    },

    get: async (
      id: Service.Transfer.Get.ID,
      params?: Service.Transfer.Get.Params
    ): Promise<Service.Transfer.Get.Result> => {
      return await this._fetch(
        this.svAPIEndpoint,
        this.transfer._path + `/${id}`,
        params
      );
    },

    create: async (
      body: Service.Transfer.Create.Body
    ): Promise<Service.Transfer.Create.Result> => {
      let res = await this._create(
        this.svAPIEndpoint,
        this.transfer._path,
        body
      );
      return res;
    },

    update: async (
      id: Service.Transfer.Update.ID,
      body: Service.Transfer.Update.Body
    ): Promise<Service.Transfer.Update.Result> => {
      let res: Service.Transfer.Update.Result = await this._update(
        this.svAPIEndpoint,
        this.transfer._path + `/${id}`,
        body
      );
      return res;
    },
  };

  adjustInventory = {
    _path: "/adjust-inventory",
    find: async (
      params?: Service.AdjustInventory.Find.Params
    ): Promise<Service.AdjustInventory.Find.Result> => {
      let res: Service.AdjustInventory.Find.Result = await this._fetch(
        this.svAPIEndpoint,
        this.adjustInventory._path,
        params
      );
      return res;
    },

    get: async (
      id: Service.AdjustInventory.Get.ID,
      params?: Service.AdjustInventory.Get.Params
    ): Promise<Service.AdjustInventory.Get.Result> => {
      return await this._fetch(
        this.svAPIEndpoint,
        this.adjustInventory._path + `/${id}`,
        params
      );
    },

    create: async (
      body: Service.AdjustInventory.Create.Body
    ): Promise<Service.AdjustInventory.Create.Result> => {
      let res = await this._create(
        this.svAPIEndpoint,
        this.adjustInventory._path,
        body
      );
      return res;
    },
  };

  inventory = {
    _path: "/inventory",
    find: async (
      params?: Service.Inventory.Find.Params
    ): Promise<Service.Inventory.Find.Result> => {
      let res: Service.Inventory.Find.Result = await this._fetch(
        this.svAPIEndpoint,
        this.inventory._path,
        params
      );
      return res;
    },
  };

  integrationApp = {
    _path: "/integration-app",
    find: async (
      params?: Service.App.Find.Params
    ): Promise<Service.App.Find.Result> => {
      let res: Service.App.Find.Result = await this._fetch(
        this.svAPIEndpoint,
        this.integrationApp._path,
        params
      );
      return res;
    },

    get: async (
      id: Service.App.Get.ID,
      params?: Service.App.Find.Params
    ): Promise<Service.App.Get.Result> => {
      return await this._fetch(
        this.svAPIEndpoint,
        this.integrationApp._path + `/${id}`,
        params
      );
    },

    create: async (
      body: Service.App.Create.Body
    ): Promise<Service.App.Create.Result> => {
      let res = await this._create(
        this.svAPIEndpoint,
        this.integrationApp._path,
        body
      );
      return res;
    },

    update: async (
      id: Service.App.Update.ID,
      body: Service.App.Update.Body
    ): Promise<Service.App.Update.Result> => {
      let res: Service.App.Update.Result = await this._update(
        this.svAPIEndpoint,
        this.integrationApp._path + `/${id}`,
        body
      );
      return res;
    },
  };

  joinActionsWebHook = {
    _path: "/svix-integration",
    update: async (
      id: null,
      body: Service.JoinActionsWeHook.Data
    ): Promise<Service.JoinActionsWeHook.Result> => {
      let res: Service.JoinActionsWeHook.Result = await this._update(
        this.svAPIEndpoint,
        this.joinActionsWebHook._path,
        body
      );
      return res;
    },
  };

  static ActionLogs = class {
    _path: string = "/integration-action-log";
    available_app_name: string = "";
    available_app_id: StringId = "";
    app_id: StringId = "";
    action: string = "";
    status: Service.ActionLogs.Status;
    error?: any;
    start_time: number;
    end_time?: number;
    total_time?: number;
    company_namespace?: NameSpaces;
    body?: any;
    meta?: any;
    message: string;
    details: Service.ActionLogs.Detail[];
    sync_id: string;
    isOld: boolean;
    constructor(public superThis: Repzo, sync_id: string) {
      this.start_time = Date.now();
      this.status = "processing";
      this.message = "Log Created";
      this.details = [];
      this.sync_id = sync_id;
      this.isOld = true;
    }
    async load(sync_id: string) {
      const params: Service.ActionLogs.Find.Params = { sync_id: sync_id };
      const res: Service.ActionLogs.Find.Result = await this.superThis._fetch(
        this.superThis.svAPIEndpoint,
        this._path,
        params
      );
      if (!res?.data?.length)
        throw new Error(`Action Log Not found, sync_id: ${sync_id}`);
      const action_log: Service.ActionLogs.Schema = res.data[0];
      this.sync_id = sync_id;
      this.details = action_log.details;
      this.status = action_log.status;
      this.error = action_log.error;
      this.start_time = action_log.start_time;
      this.body = action_log.body;
      this.meta = action_log.meta;
      this.message = action_log.message;
      this.app_id = action_log.app_id;
      this.available_app_id = action_log.available_app_id;
      this.available_app_name = action_log.available_app_name;
      this.company_namespace = action_log.company_namespace;
      this.action = action_log.action;
      this.isOld = true;

      return this;
    }
    setStatus(status: Service.ActionLogs.Status, error?: any) {
      this.details.push({
        timestamp: Date.now(),
        content: `status was changed from ${this.status} to ${status}`,
      });
      this.status = status;
      if (error) {
        if (typeof error == "string") {
          this.error = { message: error };
        } else if (error.message || error.response?.data) {
          this.error = {
            // json: error.toJSON ? error.toJSON() : undefined,
            message: error.message,
            responseData: error.response?.data,
          };
        } else {
          this.error = error;
        }
        return this;
      }
      return this;
    }
    setBody(body: any) {
      this.body = body;
      return this;
    }
    setMeta(meta: any) {
      this.meta = meta;
      return this;
    }
    async commit() {
      let doc: Service.ActionLogs.Create.Body = {
        available_app_name: this.available_app_name,
        available_app_id: this.available_app_id,
        app_id: this.app_id,
        action: this.action,
        company_namespace: this.company_namespace,
        status: this.status,
        error: this.error ? this.error : undefined,
        start_time: this.start_time,
        end_time: Date.now(),
        total_time: Date.now() - this.start_time,
        body: this.body,
        meta: this.meta,
        message: this.message,
        details: this.details,
        sync_id: this.sync_id,
      };
      try {
        const res: Service.ActionLogs.Create.Result = await this.superThis._create(
          this.superThis.svAPIEndpoint,
          this._path,
          doc
        );
      } catch (e) {
        console.error(e);
      }
      return this;
    }
    addDetail(detail: string, meta?: any) {
      let d: Service.ActionLogs.Detail = {
        timestamp: Date.now(),
        content: detail,
      };
      this.message = detail;
      if (meta) d.meta = meta;
      this.details.push(d);
      return this;
    }
  };

  static CommandLog = class {
    _path: string = "/integration-command-log";
    available_app_name: string;
    available_app_id: StringId;
    app_id: StringId;
    command: string;
    status: Service.CommandLog.Status;
    error?: any;
    start_time: number;
    end_time?: number;
    total_time?: number;
    company_namespace: NameSpaces;
    body?: any;
    meta?: any;
    message: string;
    details: Service.CommandLog.Detail[];
    sync_id: string;
    isOld: boolean;
    priority?: number;
    isPrioritized: boolean;
    retries: number;
    queuedAt?: Date;
    failedAt?: Date;
    succeededAt?: Date;
    skippedAt?: Date;
    receivedAt?: Date;
    processedAt?: Date;
    onGoing: boolean;
    trigger?: string;
    constructor(
      public superThis: Repzo,
      app: Service.App.Schema_with_populated_AvailableApp,
      command: string,
      trigger?: string
    ) {
      this.app_id = app._id;
      this.available_app_id = app.available_app._id;
      this.available_app_name = app.available_app.name;
      this.company_namespace = app.company_namespace;
      this.start_time = Date.now();
      this.status = "received";
      this.message = "Request received";
      this.command = command;
      this.details = [{ timestamp: Date.now(), content: "Request received" }];
      this.sync_id = uuid();
      this.isOld = false;
      this.isPrioritized = false;
      this.retries = 1;
      this.trigger = trigger;
      this.onGoing = true;
    }
    async load(sync_id?: string, retries?: number) {
      if (sync_id) {
        const params: Service.CommandLog.Find.Params = { sync_id: sync_id };
        const res: Service.CommandLog.Find.Result = await this.superThis._fetch(
          this.superThis.svAPIEndpoint,
          this._path,
          params
        );
        if (!res?.data?.length)
          throw new Error(`Command Log Not found, sync_id: ${sync_id}`);
        const command_log: Service.CommandLog.Schema = res.data[0];

        if (command_log) {
          this.sync_id = sync_id;
          this.details = command_log.details;
          this.status = command_log.status;
          this.error = command_log.error;
          this.start_time = command_log.start_time;
          this.body = command_log.body;
          this.meta = command_log.meta;
          this.message = command_log.message;
          this.retries =
            retries !== undefined
              ? retries
              : command_log.retries || this.retries; // retries !== undefined ? retries : command_log.retries;
          this.isOld = true;
          this.failedAt = command_log.failedAt;
          this.succeededAt = command_log.succeededAt;
          this.skippedAt = command_log.skippedAt;
          this.receivedAt = command_log.receivedAt;
          this.processedAt = command_log.processedAt;
          this.onGoing = command_log.onGoing || false;
          this.trigger = command_log.trigger;
          // this.priority = command_log.priority
          //   ? command_log.priority
          //   : this.priority
          //   ? this.priority
          //   : undefined;
        }
      }
      return this;
    }
    setStatus(status: Service.CommandLog.Status, error?: any) {
      this.addDetail(`status was changed from ${this.status} to ${status}`);
      this.status = status;
      if (error) {
        if (typeof error == "string") {
          this.error = { message: error };
        } else if (error.message || error.response?.data) {
          this.error = {
            // json: error.toJSON ? error.toJSON() : undefined,
            message: error.message,
            responseData: error.response?.data,
          };
        } else {
          this.error = error;
        }
        return this;
      }
      switch (status) {
        case "fail":
          this.failedAt = new Date();
          this.onGoing = false;
          break;
        case "processing":
          this.processedAt = new Date();
          this.onGoing = true;
          break;
        case "queued":
          this.queuedAt = new Date();
          this.onGoing = true;
          break;
        case "received":
          this.receivedAt = new Date();
          this.onGoing = true;
          break;
        case "skipped":
          this.skippedAt = new Date();
          this.onGoing = false;
          break;
        case "success":
          this.succeededAt = new Date();
          this.onGoing = false;
          break;
      }
      return this;
    }
    setBody(body: any) {
      this.body = body;
      return this;
    }
    setMeta(meta: any) {
      this.meta = meta;
      return this;
    }
    async commit() {
      let doc: Service.CommandLog.Create.Body = {
        available_app_name: this.available_app_name,
        available_app_id: this.available_app_id,
        app_id: this.app_id,
        command: this.command,
        status: this.status,
        error: this.error ? this.error : undefined,
        start_time: this.start_time,
        end_time: Date.now(),
        total_time: Date.now() - this.start_time,
        company_namespace: this.company_namespace,
        body: this.body,
        meta: this.meta,
        message: this.message,
        details: this.details,
        sync_id: this.sync_id,
        // priority: this.priority ? this.priority : undefined,
        queuedAt: this.queuedAt ? this.queuedAt : undefined,
        failedAt: this.failedAt ? this.failedAt : undefined,
        succeededAt: this.succeededAt ? this.succeededAt : undefined,
        skippedAt: this.skippedAt ? this.skippedAt : undefined,
        receivedAt: this.receivedAt ? this.receivedAt : undefined,
        processedAt: this.processedAt ? this.processedAt : undefined,
        onGoing: this.onGoing !== undefined ? this.onGoing : undefined,
        retries: this.retries !== undefined ? this.retries : undefined,
        trigger: this.trigger,
      };
      try {
        const res: Service.CommandLog.Create.Result = await this.superThis._create(
          this.superThis.svAPIEndpoint,
          this._path,
          doc
        );
        this.isOld = true;
      } catch (e) {
        console.error(e);
      }
      return this;
    }
    addDetail(detail: string, meta?: any) {
      let d: Service.CommandLog.Detail = {
        timestamp: Date.now(),
        content: detail,
      };
      this.message = detail;
      if (meta) d.meta = meta;
      this.details.push(d);
      return this;
    }
  };

  patchAction = {
    _path: "/patch-action",
    create: async (
      body: Service.PatchAction.Create.Body,
      params?: Service.PatchAction.Create.Params
    ): Promise<Service.PatchAction.Create.Result> => {
      const res: Service.PatchAction.Create.Result = await this._create(
        this.svAPIEndpoint,
        this.patchAction._path,
        body,
        params
      );
      return res;
    },

    update: async (
      body: Service.PatchAction.Update.Body
    ): Promise<Service.PatchAction.Update.Result> => {
      const res: Service.PatchAction.Update.Result = await this._update(
        this.svAPIEndpoint,
        this.patchAction._path,
        body
      );
      return res;
    },
  };

  updateIntegrationMeta = {
    _path: "/update-integration-meta",
    create: async (
      body: Service.UpdateIntegrationMeta.Create.Body,
      params?: Service.UpdateIntegrationMeta.Create.Params
    ): Promise<Service.UpdateIntegrationMeta.Create.Result> => {
      let res = await this._create(
        this.svAPIEndpoint,
        this.updateIntegrationMeta._path,
        body,
        params
      );
      return res;
    },
  };
}
