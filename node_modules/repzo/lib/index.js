import axios from "axios";
import { v4 as uuid } from "uuid";
export default class Repzo {
  constructor(apiKey, options) {
    this.client = {
      _path: "/client",
      find: async (params) => {
        let res = await this._fetch(
          this.svAPIEndpoint,
          this.client._path,
          params
        );
        return res;
      },
      get: async (id, params) => {
        return await this._fetch(
          this.svAPIEndpoint,
          this.client._path + `/${id}`,
          params
        );
      },
      create: async (body) => {
        let res = await this._create(
          this.svAPIEndpoint,
          this.client._path,
          body
        );
        return res;
      },
      update: async (id, body) => {
        let res = await this._update(
          this.svAPIEndpoint,
          this.client._path + `/${id}`,
          body
        );
        return res;
      },
      remove: async (id) => {
        let res = await this._delete(
          this.svAPIEndpoint,
          this.client._path + `/${id}`
        );
        return res;
      },
    };
    this.product = {
      _path: "/product",
      find: async (params) => {
        let res = await this._fetch(
          this.svAPIEndpoint,
          this.product._path,
          params
        );
        return res;
      },
      get: async (id, params) => {
        return await this._fetch(
          this.svAPIEndpoint,
          this.product._path + `/${id}`,
          params
        );
      },
      create: async (body) => {
        let res = await this._create(
          this.svAPIEndpoint,
          this.product._path,
          body
        );
        return res;
      },
      update: async (id, body) => {
        let res = await this._update(
          this.svAPIEndpoint,
          this.product._path + `/${id}`,
          body
        );
        return res;
      },
      remove: async (id) => {
        let res = await this._delete(
          this.svAPIEndpoint,
          this.product._path + `/${id}`
        );
        return res;
      },
    };
    this.variant = {
      _path: "/variant",
      find: async (params) => {
        let res = await this._fetch(
          this.svAPIEndpoint,
          this.variant._path,
          params
        );
        return res;
      },
      get: async (id, params) => {
        return await this._fetch(
          this.svAPIEndpoint,
          this.variant._path + `/${id}`,
          params
        );
      },
      create: async (body) => {
        let res = await this._create(
          this.svAPIEndpoint,
          this.variant._path,
          body
        );
        return res;
      },
      update: async (id, body) => {
        let res = await this._update(
          this.svAPIEndpoint,
          this.variant._path + `/${id}`,
          body
        );
        return res;
      },
      remove: async (id) => {
        let res = await this._delete(
          this.svAPIEndpoint,
          this.variant._path + `/${id}`
        );
        return res;
      },
    };
    this.category = {
      _path: "/product-category",
      find: async (params) => {
        let res = await this._fetch(
          this.svAPIEndpoint,
          this.category._path,
          params
        );
        return res;
      },
      get: async (id) => {
        return await this._fetch(
          this.svAPIEndpoint,
          this.category._path + `/${id}`
        );
      },
      create: async (body) => {
        let res = await this._create(
          this.svAPIEndpoint,
          this.category._path,
          body
        );
        return res;
      },
      update: async (id, body) => {
        let res = await this._update(
          this.svAPIEndpoint,
          this.category._path + `/${id}`,
          body
        );
        return res;
      },
      remove: async (id) => {
        let res = await this._delete(
          this.svAPIEndpoint,
          this.category._path + `/${id}`
        );
        return res;
      },
    };
    this.sub_category = {
      _path: "/product-sub-category",
      find: async (params) => {
        let res = await this._fetch(
          this.svAPIEndpoint,
          this.sub_category._path,
          params
        );
        return res;
      },
      get: async (id, params) => {
        return await this._fetch(
          this.svAPIEndpoint,
          this.sub_category._path + `/${id}`,
          params
        );
      },
      create: async (body) => {
        let res = await this._create(
          this.svAPIEndpoint,
          this.sub_category._path,
          body
        );
        return res;
      },
      update: async (id, body) => {
        let res = await this._update(
          this.svAPIEndpoint,
          this.sub_category._path + `/${id}`,
          body
        );
        return res;
      },
      remove: async (id) => {
        let res = await this._delete(
          this.svAPIEndpoint,
          this.sub_category._path + `/${id}`
        );
        return res;
      },
    };
    this.brand = {
      _path: "/product-brand",
      find: async (params) => {
        let res = await this._fetch(
          this.svAPIEndpoint,
          this.brand._path,
          params
        );
        return res;
      },
      get: async (id) => {
        return await this._fetch(
          this.svAPIEndpoint,
          this.brand._path + `/${id}`
        );
      },
      create: async (body) => {
        let res = await this._create(
          this.svAPIEndpoint,
          this.brand._path,
          body
        );
        return res;
      },
      update: async (id, body) => {
        let res = await this._update(
          this.svAPIEndpoint,
          this.brand._path + `/${id}`,
          body
        );
        return res;
      },
      remove: async (id) => {
        let res = await this._delete(
          this.svAPIEndpoint,
          this.brand._path + `/${id}`
        );
        return res;
      },
    };
    this.product_group = {
      _path: "/product-group",
      find: async (params) => {
        let res = await this._fetch(
          this.svAPIEndpoint,
          this.product_group._path,
          params
        );
        return res;
      },
      get: async (id) => {
        return await this._fetch(
          this.svAPIEndpoint,
          this.product_group._path + `/${id}`
        );
      },
      create: async (body) => {
        let res = await this._create(
          this.svAPIEndpoint,
          this.product_group._path,
          body
        );
        return res;
      },
      update: async (id, body) => {
        let res = await this._update(
          this.svAPIEndpoint,
          this.product_group._path + `/${id}`,
          body
        );
        return res;
      },
      remove: async (id) => {
        let res = await this._delete(
          this.svAPIEndpoint,
          this.product_group._path + `/${id}`
        );
        return res;
      },
    };
    this.tax = {
      _path: "/tax",
      find: async (params) => {
        let res = await this._fetch(this.svAPIEndpoint, this.tax._path, params);
        return res;
      },
      get: async (id) => {
        return await this._fetch(this.svAPIEndpoint, this.tax._path + `/${id}`);
      },
      create: async (body) => {
        let res = await this._create(this.svAPIEndpoint, this.tax._path, body);
        return res;
      },
      update: async (id, body) => {
        let res = await this._update(
          this.svAPIEndpoint,
          this.tax._path + `/${id}`,
          body
        );
        return res;
      },
      remove: async (id) => {
        let res = await this._delete(
          this.svAPIEndpoint,
          this.tax._path + `/${id}`
        );
        return res;
      },
    };
    this.measureunit = {
      _path: "/measureunits",
      find: async (params) => {
        let res = await this._fetch(
          this.svAPIEndpoint,
          this.measureunit._path,
          params
        );
        return res;
      },
      get: async (id) => {
        return await this._fetch(
          this.svAPIEndpoint,
          this.measureunit._path + `/${id}`
        );
      },
      create: async (body) => {
        let res = await this._create(
          this.svAPIEndpoint,
          this.measureunit._path,
          body
        );
        return res;
      },
      update: async (id, body) => {
        let res = await this._update(
          this.svAPIEndpoint,
          this.measureunit._path + `/${id}`,
          body
        );
        return res;
      },
      remove: async (id) => {
        let res = await this._delete(
          this.svAPIEndpoint,
          this.measureunit._path + `/${id}`
        );
        return res;
      },
    };
    this.measureunitFamily = {
      _path: "/measureunit-family",
      find: async (params) => {
        let res = await this._fetch(
          this.svAPIEndpoint,
          this.measureunitFamily._path,
          params
        );
        return res;
      },
      get: async (id) => {
        return await this._fetch(
          this.svAPIEndpoint,
          this.measureunitFamily._path + `/${id}`
        );
      },
      create: async (body) => {
        let res = await this._create(
          this.svAPIEndpoint,
          this.measureunitFamily._path,
          body
        );
        return res;
      },
      update: async (id, body) => {
        let res = await this._update(
          this.svAPIEndpoint,
          this.measureunitFamily._path + `/${id}`,
          body
        );
        return res;
      },
      remove: async (id) => {
        let res = await this._delete(
          this.svAPIEndpoint,
          this.measureunitFamily._path + `/${id}`
        );
        return res;
      },
    };
    this.media = {
      _path: "/media",
      find: async (params) => {
        let res = await this._fetch(
          this.svAPIEndpoint,
          this.media._path,
          params
        );
        return res;
      },
      get: async (id) => {
        return await this._fetch(
          this.svAPIEndpoint,
          this.media._path + `/${id}`
        );
      },
      create: async (body) => {
        let res = await this._create(
          this.svAPIEndpoint,
          this.media._path,
          body
        );
        return res;
      },
      update: async (id, body) => {
        let res = await this._update(
          this.svAPIEndpoint,
          this.media._path + `/${id}`,
          body
        );
        return res;
      },
      remove: async (id) => {
        let res = await this._delete(
          this.svAPIEndpoint,
          this.media._path + `/${id}`
        );
        return res;
      },
    };
    this.priceList = {
      _path: "/pricelists",
      find: async (params) => {
        let res = await this._fetch(
          this.svAPIEndpoint,
          this.priceList._path,
          params
        );
        return res;
      },
      get: async (id) => {
        return await this._fetch(
          this.svAPIEndpoint,
          this.priceList._path + `/${id}`
        );
      },
      create: async (body) => {
        let res = await this._create(
          this.svAPIEndpoint,
          this.priceList._path,
          body
        );
        return res;
      },
      update: async (id, body) => {
        let res = await this._update(
          this.svAPIEndpoint,
          this.priceList._path + `/${id}`,
          body
        );
        return res;
      },
      remove: async (id) => {
        let res = await this._delete(
          this.svAPIEndpoint,
          this.priceList._path + `/${id}`
        );
        return res;
      },
    };
    this.priceListItem = {
      _path: "/pricelistsitems",
      find: async (params) => {
        let res = await this._fetch(
          this.svAPIEndpoint,
          this.priceListItem._path,
          params
        );
        return res;
      },
      get: async (id) => {
        return await this._fetch(
          this.svAPIEndpoint,
          this.priceListItem._path + `/${id}`
        );
      },
      create: async (body) => {
        let res = await this._create(
          this.svAPIEndpoint,
          this.priceListItem._path,
          body
        );
        return res;
      },
      update: async (id, body) => {
        let res = await this._update(
          this.svAPIEndpoint,
          this.priceListItem._path + `/${id}`,
          body
        );
        return res;
      },
      remove: async (id) => {
        let res = await this._delete(
          this.svAPIEndpoint,
          this.priceListItem._path + `/${id}`
        );
        return res;
      },
    };
    this.team = {
      _path: "/teams",
      find: async (params) => {
        let res = await this._fetch(
          this.svAPIEndpoint,
          this.team._path,
          params
        );
        return res;
      },
      get: async (id) => {
        return await this._fetch(
          this.svAPIEndpoint,
          this.team._path + `/${id}`
        );
      },
      create: async (body) => {
        let res = await this._create(this.svAPIEndpoint, this.team._path, body);
        return res;
      },
      update: async (id, body) => {
        let res = await this._update(
          this.svAPIEndpoint,
          this.team._path + `/${id}`,
          body
        );
        return res;
      },
      remove: async (id) => {
        let res = await this._delete(
          this.svAPIEndpoint,
          this.team._path + `/${id}`
        );
        return res;
      },
    };
    this.rep = {
      _path: "/rep",
      find: async (params) => {
        let res = await this._fetch(this.svAPIEndpoint, this.rep._path, params);
        return res;
      },
      get: async (id, params) => {
        return await this._fetch(
          this.svAPIEndpoint,
          this.rep._path + `/${id}`,
          params
        );
      },
      create: async (body) => {
        let res = await this._create(this.svAPIEndpoint, this.rep._path, body);
        return res;
      },
      update: async (id, body) => {
        let res = await this._update(
          this.svAPIEndpoint,
          this.rep._path + `/${id}`,
          body
        );
        return res;
      },
      remove: async (id) => {
        let res = await this._delete(
          this.svAPIEndpoint,
          this.rep._path + `/${id}`
        );
        return res;
      },
    };
    this.tag = {
      _path: "/tag",
      find: async (params) => {
        let res = await this._fetch(this.svAPIEndpoint, this.tag._path, params);
        return res;
      },
      get: async (id) => {
        return await this._fetch(this.svAPIEndpoint, this.tag._path + `/${id}`);
      },
      create: async (body) => {
        let res = await this._create(this.svAPIEndpoint, this.tag._path, body);
        return res;
      },
      update: async (id, body) => {
        let res = await this._update(
          this.svAPIEndpoint,
          this.tag._path + `/${id}`,
          body
        );
        return res;
      },
      remove: async (id) => {
        let res = await this._delete(
          this.svAPIEndpoint,
          this.tag._path + `/${id}`
        );
        return res;
      },
    };
    this.warehouse = {
      _path: "/warehouse",
      find: async (params) => {
        let res = await this._fetch(
          this.svAPIEndpoint,
          this.warehouse._path,
          params
        );
        return res;
      },
      get: async (id) => {
        return await this._fetch(
          this.svAPIEndpoint,
          this.warehouse._path + `/${id}`
        );
      },
      create: async (body) => {
        let res = await this._create(
          this.svAPIEndpoint,
          this.warehouse._path,
          body
        );
        return res;
      },
      update: async (id, body) => {
        let res = await this._update(
          this.svAPIEndpoint,
          this.warehouse._path + `/${id}`,
          body
        );
        return res;
      },
      remove: async (id) => {
        let res = await this._delete(
          this.svAPIEndpoint,
          this.warehouse._path + `/${id}`
        );
        return res;
      },
    };
    this.channel = {
      _path: "/client-channel",
      find: async (params) => {
        let res = await this._fetch(
          this.svAPIEndpoint,
          this.channel._path,
          params
        );
        return res;
      },
      get: async (id) => {
        return await this._fetch(
          this.svAPIEndpoint,
          this.channel._path + `/${id}`
        );
      },
      create: async (body) => {
        let res = await this._create(
          this.svAPIEndpoint,
          this.channel._path,
          body
        );
        return res;
      },
      update: async (id, body) => {
        let res = await this._update(
          this.svAPIEndpoint,
          this.channel._path + `/${id}`,
          body
        );
        return res;
      },
      remove: async (id) => {
        let res = await this._delete(
          this.svAPIEndpoint,
          this.channel._path + `/${id}`
        );
        return res;
      },
    };
    this.paymentTerm = {
      _path: "/paymentterms",
      find: async (params) => {
        let res = await this._fetch(
          this.svAPIEndpoint,
          this.paymentTerm._path,
          params
        );
        return res;
      },
      get: async (id) => {
        return await this._fetch(
          this.svAPIEndpoint,
          this.paymentTerm._path + `/${id}`
        );
      },
      create: async (body) => {
        let res = await this._create(
          this.svAPIEndpoint,
          this.paymentTerm._path,
          body
        );
        return res;
      },
      update: async (id, body) => {
        let res = await this._update(
          this.svAPIEndpoint,
          this.paymentTerm._path + `/${id}`,
          body
        );
        return res;
      },
      remove: async (id) => {
        let res = await this._delete(
          this.svAPIEndpoint,
          this.paymentTerm._path + `/${id}`
        );
        return res;
      },
    };
    this.bank = {
      _path: "/banks",
      find: async (params) => {
        let res = await this._fetch(
          this.svAPIEndpoint,
          this.bank._path,
          params
        );
        return res;
      },
      get: async (id) => {
        return await this._fetch(
          this.svAPIEndpoint,
          this.bank._path + `/${id}`
        );
      },
      create: async (body) => {
        let res = await this._create(this.svAPIEndpoint, this.bank._path, body);
        return res;
      },
      update: async (id, body) => {
        let res = await this._update(
          this.svAPIEndpoint,
          this.bank._path + `/${id}`,
          body
        );
        return res;
      },
    };
    this.bank_list = {
      _path: "/bankslists",
      find: async (params) => {
        let res = await this._fetch(
          this.svAPIEndpoint,
          this.bank_list._path,
          params
        );
        return res;
      },
      get: async (id) => {
        return await this._fetch(
          this.svAPIEndpoint,
          this.bank_list._path + `/${id}`
        );
      },
      create: async (body) => {
        let res = await this._create(
          this.svAPIEndpoint,
          this.bank_list._path,
          body
        );
        return res;
      },
      update: async (id, body) => {
        let res = await this._update(
          this.svAPIEndpoint,
          this.bank_list._path + `/${id}`,
          body
        );
        return res;
      },
    };
    this.customStatus = {
      _path: "/custom-status",
      find: async (params) => {
        let res = await this._fetch(
          this.svAPIEndpoint,
          this.customStatus._path,
          params
        );
        return res;
      },
      get: async (id) => {
        return await this._fetch(
          this.svAPIEndpoint,
          this.customStatus._path + `/${id}`
        );
      },
      create: async (body) => {
        let res = await this._create(
          this.svAPIEndpoint,
          this.customStatus._path,
          body
        );
        return res;
      },
      update: async (id, body) => {
        let res = await this._update(
          this.svAPIEndpoint,
          this.customStatus._path + `/${id}`,
          body
        );
        return res;
      },
      remove: async (id) => {
        let res = await this._delete(
          this.svAPIEndpoint,
          this.customStatus._path + `/${id}`
        );
        return res;
      },
    };
    this.invoice = {
      _path: "/fullinvoices",
      find: async (params) => {
        let res = await this._fetch(
          this.svAPIEndpoint,
          this.invoice._path,
          params
        );
        return res;
      },
      get: async (id, params) => {
        return await this._fetch(
          this.svAPIEndpoint,
          this.invoice._path + `/${id}`,
          params
        );
      },
      create: async (body) => {
        let res = await this._create(
          this.svAPIEndpoint,
          this.invoice._path,
          body
        );
        return res;
      },
      update: async (id, body) => {
        let res = await this._update(
          this.svAPIEndpoint,
          this.invoice._path + `/${id}`,
          body
        );
        return res;
      },
    };
    this.proforma = {
      _path: "/proforma",
      find: async (params) => {
        let res = await this._fetch(
          this.svAPIEndpoint,
          this.proforma._path,
          params
        );
        return res;
      },
      get: async (id, params) => {
        return await this._fetch(
          this.svAPIEndpoint,
          this.proforma._path + `/${id}`,
          params
        );
      },
      create: async (body) => {
        let res = await this._create(
          this.svAPIEndpoint,
          this.proforma._path,
          body
        );
        return res;
      },
      update: async (id, body) => {
        let res = await this._update(
          this.svAPIEndpoint,
          this.proforma._path + `/${id}`,
          body
        );
        return res;
      },
    };
    this.payment = {
      _path: "/payments",
      find: async (params) => {
        let res = await this._fetch(
          this.svAPIEndpoint,
          this.payment._path,
          params
        );
        return res;
      },
      get: async (id, params) => {
        return await this._fetch(
          this.svAPIEndpoint,
          this.payment._path + `/${id}`,
          params
        );
      },
      create: async (body) => {
        let res = await this._create(
          this.svAPIEndpoint,
          this.payment._path,
          body
        );
        return res;
      },
      update: async (id, body) => {
        let res = await this._update(
          this.svAPIEndpoint,
          this.payment._path + `/${id}`,
          body
        );
        return res;
      },
    };
    this.refund = {
      _path: "/refund",
      find: async (params) => {
        let res = await this._fetch(
          this.svAPIEndpoint,
          this.refund._path,
          params
        );
        return res;
      },
      get: async (id, params) => {
        return await this._fetch(
          this.svAPIEndpoint,
          this.refund._path + `/${id}`,
          params
        );
      },
      create: async (body) => {
        let res = await this._create(
          this.svAPIEndpoint,
          this.refund._path,
          body
        );
        return res;
      },
      update: async (id, body) => {
        let res = await this._update(
          this.svAPIEndpoint,
          this.refund._path + `/${id}`,
          body
        );
        return res;
      },
    };
    this.transfer = {
      _path: "/transfer",
      find: async (params) => {
        let res = await this._fetch(
          this.svAPIEndpoint,
          this.transfer._path,
          params
        );
        return res;
      },
      get: async (id, params) => {
        return await this._fetch(
          this.svAPIEndpoint,
          this.transfer._path + `/${id}`,
          params
        );
      },
      create: async (body) => {
        let res = await this._create(
          this.svAPIEndpoint,
          this.transfer._path,
          body
        );
        return res;
      },
      update: async (id, body) => {
        let res = await this._update(
          this.svAPIEndpoint,
          this.transfer._path + `/${id}`,
          body
        );
        return res;
      },
    };
    this.adjustInventory = {
      _path: "/adjust-inventory",
      find: async (params) => {
        let res = await this._fetch(
          this.svAPIEndpoint,
          this.adjustInventory._path,
          params
        );
        return res;
      },
      get: async (id, params) => {
        return await this._fetch(
          this.svAPIEndpoint,
          this.adjustInventory._path + `/${id}`,
          params
        );
      },
      create: async (body) => {
        let res = await this._create(
          this.svAPIEndpoint,
          this.adjustInventory._path,
          body
        );
        return res;
      },
    };
    this.inventory = {
      _path: "/inventory",
      find: async (params) => {
        let res = await this._fetch(
          this.svAPIEndpoint,
          this.inventory._path,
          params
        );
        return res;
      },
    };
    this.integrationApp = {
      _path: "/integration-app",
      find: async (params) => {
        let res = await this._fetch(
          this.svAPIEndpoint,
          this.integrationApp._path,
          params
        );
        return res;
      },
      get: async (id, params) => {
        return await this._fetch(
          this.svAPIEndpoint,
          this.integrationApp._path + `/${id}`,
          params
        );
      },
      create: async (body) => {
        let res = await this._create(
          this.svAPIEndpoint,
          this.integrationApp._path,
          body
        );
        return res;
      },
      update: async (id, body) => {
        let res = await this._update(
          this.svAPIEndpoint,
          this.integrationApp._path + `/${id}`,
          body
        );
        return res;
      },
    };
    this.joinActionsWebHook = {
      _path: "/svix-integration",
      update: async (id, body) => {
        let res = await this._update(
          this.svAPIEndpoint,
          this.joinActionsWebHook._path,
          body
        );
        return res;
      },
    };
    this.patchAction = {
      _path: "/patch-action",
      create: async (body, params) => {
        const res = await this._create(
          this.svAPIEndpoint,
          this.patchAction._path,
          body,
          params
        );
        return res;
      },
      update: async (body) => {
        const res = await this._update(
          this.svAPIEndpoint,
          this.patchAction._path,
          body
        );
        return res;
      },
    };
    this.updateIntegrationMeta = {
      _path: "/update-integration-meta",
      create: async (body, params) => {
        let res = await this._create(
          this.svAPIEndpoint,
          this.updateIntegrationMeta._path,
          body,
          params
        );
        return res;
      },
    };
    this.svAPIEndpoint =
      !options?.env || options?.env == "production"
        ? "https://sv.api.repzo.me"
        : options?.env == "staging"
        ? "https://staging.sv.api.repzo.me"
        : options?.env == "local"
        ? "http://localhost:3030"
        : "";
    this.headers = {
      "api-key": apiKey,
      "Content-Type": "application/json",
      Accept: "application/json",
    };
    if (options?.headers) Object.assign(this.headers, options.headers);
  }
  async _fetch(baseUrl, path, params) {
    let res = await axios.get(baseUrl + path, {
      params,
      headers: this.headers,
    });
    return res.data;
  }
  async _create(baseUrl, path, body, params) {
    let res = await axios.post(baseUrl + path, body, {
      params,
      headers: this.headers,
    });
    return res.data;
  }
  async _update(baseUrl, path, body, params) {
    let res = await axios.put(baseUrl + path, body, {
      params,
      headers: this.headers,
    });
    return res.data;
  }
  async _delete(baseUrl, path, params) {
    let res = await axios.delete(baseUrl + path, {
      params,
      headers: this.headers,
    });
    return res.data;
  }
}
Repzo.ActionLogs = class {
  constructor(superThis, sync_id) {
    this.superThis = superThis;
    this._path = "/integration-action-log";
    this.available_app_name = "";
    this.available_app_id = "";
    this.app_id = "";
    this.action = "";
    this.start_time = Date.now();
    this.status = "processing";
    this.message = "Log Created";
    this.details = [];
    this.sync_id = sync_id;
    this.isOld = true;
  }
  async load(sync_id) {
    const params = { sync_id: sync_id };
    const res = await this.superThis._fetch(
      this.superThis.svAPIEndpoint,
      this._path,
      params
    );
    if (!res?.data?.length)
      throw new Error(`Action Log Not found, sync_id: ${sync_id}`);
    const action_log = res.data[0];
    this.sync_id = sync_id;
    this.details = action_log.details;
    this.status = action_log.status;
    this.error = action_log.error;
    this.start_time = action_log.start_time;
    this.body = action_log.body;
    this.meta = action_log.meta;
    this.message = action_log.message;
    this.app_id = action_log.app_id;
    this.available_app_id = action_log.available_app_id;
    this.available_app_name = action_log.available_app_name;
    this.company_namespace = action_log.company_namespace;
    this.action = action_log.action;
    this.isOld = true;
    return this;
  }
  setStatus(status, error) {
    this.details.push({
      timestamp: Date.now(),
      content: `status was changed from ${this.status} to ${status}`,
    });
    this.status = status;
    if (error) {
      if (typeof error == "string") {
        this.error = { message: error };
      } else if (error.message || error.response?.data) {
        this.error = {
          // json: error.toJSON ? error.toJSON() : undefined,
          message: error.message,
          responseData: error.response?.data,
        };
      } else {
        this.error = error;
      }
      return this;
    }
    return this;
  }
  setBody(body) {
    this.body = body;
    return this;
  }
  setMeta(meta) {
    this.meta = meta;
    return this;
  }
  async commit() {
    let doc = {
      available_app_name: this.available_app_name,
      available_app_id: this.available_app_id,
      app_id: this.app_id,
      action: this.action,
      company_namespace: this.company_namespace,
      status: this.status,
      error: this.error ? this.error : undefined,
      start_time: this.start_time,
      end_time: Date.now(),
      total_time: Date.now() - this.start_time,
      body: this.body,
      meta: this.meta,
      message: this.message,
      details: this.details,
      sync_id: this.sync_id,
    };
    try {
      const res = await this.superThis._create(
        this.superThis.svAPIEndpoint,
        this._path,
        doc
      );
    } catch (e) {
      console.error(e);
    }
    return this;
  }
  addDetail(detail, meta) {
    let d = {
      timestamp: Date.now(),
      content: detail,
    };
    this.message = detail;
    if (meta) d.meta = meta;
    this.details.push(d);
    return this;
  }
};
Repzo.CommandLog = class {
  constructor(superThis, app, command, trigger) {
    this.superThis = superThis;
    this._path = "/integration-command-log";
    this.app_id = app._id;
    this.available_app_id = app.available_app._id;
    this.available_app_name = app.available_app.name;
    this.company_namespace = app.company_namespace;
    this.start_time = Date.now();
    this.status = "received";
    this.message = "Request received";
    this.command = command;
    this.details = [{ timestamp: Date.now(), content: "Request received" }];
    this.sync_id = uuid();
    this.isOld = false;
    this.isPrioritized = false;
    this.retries = 1;
    this.trigger = trigger;
    this.onGoing = true;
  }
  async load(sync_id, retries) {
    if (sync_id) {
      const params = { sync_id: sync_id };
      const res = await this.superThis._fetch(
        this.superThis.svAPIEndpoint,
        this._path,
        params
      );
      if (!res?.data?.length)
        throw new Error(`Command Log Not found, sync_id: ${sync_id}`);
      const command_log = res.data[0];
      if (command_log) {
        this.sync_id = sync_id;
        this.details = command_log.details;
        this.status = command_log.status;
        this.error = command_log.error;
        this.start_time = command_log.start_time;
        this.body = command_log.body;
        this.meta = command_log.meta;
        this.message = command_log.message;
        this.retries =
          retries !== undefined ? retries : command_log.retries || this.retries; // retries !== undefined ? retries : command_log.retries;
        this.isOld = true;
        this.failedAt = command_log.failedAt;
        this.succeededAt = command_log.succeededAt;
        this.skippedAt = command_log.skippedAt;
        this.receivedAt = command_log.receivedAt;
        this.processedAt = command_log.processedAt;
        this.onGoing = command_log.onGoing || false;
        this.trigger = command_log.trigger;
        // this.priority = command_log.priority
        //   ? command_log.priority
        //   : this.priority
        //   ? this.priority
        //   : undefined;
      }
    }
    return this;
  }
  setStatus(status, error) {
    this.addDetail(`status was changed from ${this.status} to ${status}`);
    this.status = status;
    if (error) {
      if (typeof error == "string") {
        this.error = { message: error };
      } else if (error.message || error.response?.data) {
        this.error = {
          // json: error.toJSON ? error.toJSON() : undefined,
          message: error.message,
          responseData: error.response?.data,
        };
      } else {
        this.error = error;
      }
      return this;
    }
    switch (status) {
      case "fail":
        this.failedAt = new Date();
        this.onGoing = false;
        break;
      case "processing":
        this.processedAt = new Date();
        this.onGoing = true;
        break;
      case "queued":
        this.queuedAt = new Date();
        this.onGoing = true;
        break;
      case "received":
        this.receivedAt = new Date();
        this.onGoing = true;
        break;
      case "skipped":
        this.skippedAt = new Date();
        this.onGoing = false;
        break;
      case "success":
        this.succeededAt = new Date();
        this.onGoing = false;
        break;
    }
    return this;
  }
  setBody(body) {
    this.body = body;
    return this;
  }
  setMeta(meta) {
    this.meta = meta;
    return this;
  }
  async commit() {
    let doc = {
      available_app_name: this.available_app_name,
      available_app_id: this.available_app_id,
      app_id: this.app_id,
      command: this.command,
      status: this.status,
      error: this.error ? this.error : undefined,
      start_time: this.start_time,
      end_time: Date.now(),
      total_time: Date.now() - this.start_time,
      company_namespace: this.company_namespace,
      body: this.body,
      meta: this.meta,
      message: this.message,
      details: this.details,
      sync_id: this.sync_id,
      // priority: this.priority ? this.priority : undefined,
      queuedAt: this.queuedAt ? this.queuedAt : undefined,
      failedAt: this.failedAt ? this.failedAt : undefined,
      succeededAt: this.succeededAt ? this.succeededAt : undefined,
      skippedAt: this.skippedAt ? this.skippedAt : undefined,
      receivedAt: this.receivedAt ? this.receivedAt : undefined,
      processedAt: this.processedAt ? this.processedAt : undefined,
      onGoing: this.onGoing !== undefined ? this.onGoing : undefined,
      retries: this.retries !== undefined ? this.retries : undefined,
      trigger: this.trigger,
    };
    try {
      const res = await this.superThis._create(
        this.superThis.svAPIEndpoint,
        this._path,
        doc
      );
      this.isOld = true;
    } catch (e) {
      console.error(e);
    }
    return this;
  }
  addDetail(detail, meta) {
    let d = {
      timestamp: Date.now(),
      content: detail,
    };
    this.message = detail;
    if (meta) d.meta = meta;
    this.details.push(d);
    return this;
  }
};
