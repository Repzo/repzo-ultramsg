import {
  Params,
  Data,
  Service,
  Options,
  Headers,
  StringId,
  NameSpaces,
} from "./types/index";
export default class Repzo {
  private svAPIEndpoint;
  headers: Headers;
  constructor(apiKey: string, options?: Options);
  private _fetch;
  private _create;
  private _update;
  private _delete;
  client: {
    _path: string;
    find: (
      params?: Service.Client.Find.Params
    ) => Promise<Service.Client.Find.Result>;
    get: (
      id: Service.Client.Get.ID,
      params?: Service.Client.Get.Params
    ) => Promise<Service.Client.Get.Result>;
    create: (
      body: Service.Client.Create.Body
    ) => Promise<Service.Client.Create.Result>;
    update: (
      id: Service.Client.Update.ID,
      body: Service.Client.Update.Body
    ) => Promise<Service.Client.Update.Result>;
    remove: (
      id: Service.Client.Remove.ID
    ) => Promise<Service.Client.Remove.Result>;
  };
  product: {
    _path: string;
    find: (
      params?: Service.Product.Find.Params
    ) => Promise<Service.Product.Find.Result>;
    get: (
      id: Service.Product.Get.ID,
      params?: Service.Product.Get.Params
    ) => Promise<Service.Product.Get.Result>;
    create: (
      body: Service.Product.Create.Body
    ) => Promise<Service.Product.Create.Result>;
    update: (
      id: Service.Product.Update.ID,
      body: Service.Product.Update.Body
    ) => Promise<Service.Product.Update.Result>;
    remove: (
      id: Service.Product.Remove.ID
    ) => Promise<Service.Product.Remove.Result>;
  };
  variant: {
    _path: string;
    find: (
      params?: Service.Variant.Find.Params
    ) => Promise<Service.Variant.Find.Result>;
    get: (
      id: Service.Variant.Get.ID,
      params?: Service.Variant.Get.Params
    ) => Promise<Service.Variant.Get.Result>;
    create: (
      body: Service.Variant.Create.Body
    ) => Promise<Service.Variant.Create.Result>;
    update: (
      id: Service.Variant.Update.ID,
      body: Service.Variant.Update.Body
    ) => Promise<Service.Variant.Update.Result>;
    remove: (
      id: Service.Variant.Remove.ID
    ) => Promise<Service.Variant.Remove.Result>;
  };
  category: {
    _path: string;
    find: (
      params?: Service.Category.Find.Params
    ) => Promise<Service.Category.Find.Result>;
    get: (id: Service.Category.Get.ID) => Promise<Service.Category.Get.Result>;
    create: (
      body: Service.Category.Create.Body
    ) => Promise<Service.Category.Create.Result>;
    update: (
      id: Service.Category.Update.ID,
      body: Service.Category.Update.Body
    ) => Promise<Service.Category.Update.Result>;
    remove: (
      id: Service.Category.Remove.ID
    ) => Promise<Service.Category.Remove.Result>;
  };
  sub_category: {
    _path: string;
    find: (
      params?: Service.SubCategory.Find.Params
    ) => Promise<Service.SubCategory.Find.Result>;
    get: (
      id: Service.SubCategory.Get.ID,
      params?: Service.SubCategory.Get.Params
    ) => Promise<Service.SubCategory.Get.Result>;
    create: (
      body: Service.SubCategory.Create.Body
    ) => Promise<Service.SubCategory.Create.Result>;
    update: (
      id: Service.SubCategory.Update.ID,
      body: Service.SubCategory.Update.Body
    ) => Promise<Service.SubCategory.Update.Result>;
    remove: (
      id: Service.SubCategory.Remove.ID
    ) => Promise<Service.SubCategory.Remove.Result>;
  };
  brand: {
    _path: string;
    find: (
      params?: Service.Brand.Find.Params
    ) => Promise<Service.Brand.Find.Result>;
    get: (id: Service.Brand.Get.ID) => Promise<Service.Brand.Get.Result>;
    create: (
      body: Service.Brand.Create.Body
    ) => Promise<Service.Brand.Create.Result>;
    update: (
      id: Service.Brand.Update.ID,
      body: Service.Brand.Update.Body
    ) => Promise<Service.Brand.Update.Result>;
    remove: (
      id: Service.Brand.Remove.ID
    ) => Promise<Service.Brand.Remove.Result>;
  };
  product_group: {
    _path: string;
    find: (
      params?: Service.ProductGroup.Find.Params
    ) => Promise<Service.ProductGroup.Find.Result>;
    get: (
      id: Service.ProductGroup.Get.ID
    ) => Promise<Service.ProductGroup.Get.Result>;
    create: (
      body: Service.ProductGroup.Create.Body
    ) => Promise<Service.ProductGroup.Create.Result>;
    update: (
      id: Service.ProductGroup.Update.ID,
      body: Service.ProductGroup.Update.Body
    ) => Promise<Service.ProductGroup.Update.Result>;
    remove: (
      id: Service.ProductGroup.Remove.ID
    ) => Promise<Service.ProductGroup.Remove.Result>;
  };
  tax: {
    _path: string;
    find: (
      params?: Service.Tax.Find.Params
    ) => Promise<Service.Tax.Find.Result>;
    get: (id: Service.Tax.Get.ID) => Promise<Service.Tax.Get.Result>;
    create: (
      body: Service.Tax.Create.Body
    ) => Promise<Service.Tax.Create.Result>;
    update: (
      id: Service.Tax.Update.ID,
      body: Service.Tax.Update.Body
    ) => Promise<Service.Tax.Update.Result>;
    remove: (id: Service.Tax.Remove.ID) => Promise<Service.Tax.Remove.Result>;
  };
  measureunit: {
    _path: string;
    find: (
      params?: Service.MeasureUnit.Find.Params
    ) => Promise<Service.MeasureUnit.Find.Result>;
    get: (
      id: Service.MeasureUnit.Get.ID
    ) => Promise<Service.MeasureUnit.Get.Result>;
    create: (
      body: Service.MeasureUnit.Create.Body
    ) => Promise<Service.MeasureUnit.Create.Result>;
    update: (
      id: Service.MeasureUnit.Update.ID,
      body: Service.MeasureUnit.Update.Body
    ) => Promise<Service.MeasureUnit.Update.Result>;
    remove: (
      id: Service.MeasureUnit.Remove.ID
    ) => Promise<Service.MeasureUnit.Remove.Result>;
  };
  measureunitFamily: {
    _path: string;
    find: (
      params?: Service.MeasureUnitFamily.Find.Params
    ) => Promise<Service.MeasureUnitFamily.Find.Result>;
    get: (
      id: Service.MeasureUnitFamily.Get.ID
    ) => Promise<Service.MeasureUnitFamily.Get.Result>;
    create: (
      body: Service.MeasureUnitFamily.Create.Body
    ) => Promise<Service.MeasureUnitFamily.Create.Result>;
    update: (
      id: Service.MeasureUnitFamily.Update.ID,
      body: Service.MeasureUnitFamily.Update.Body
    ) => Promise<Service.MeasureUnitFamily.Update.Result>;
    remove: (
      id: Service.MeasureUnitFamily.Remove.ID
    ) => Promise<Service.MeasureUnitFamily.Remove.Result>;
  };
  media: {
    _path: string;
    find: (
      params?: Service.Media.Find.Params
    ) => Promise<Service.Media.Find.Result>;
    get: (id: Service.Media.Get.ID) => Promise<Service.Media.Get.Result>;
    create: (
      body: Service.Media.Create.Body
    ) => Promise<Service.Media.Create.Result>;
    update: (
      id: Service.Media.Update.ID,
      body: Service.Media.Update.Body
    ) => Promise<Service.Media.Update.Result>;
    remove: (
      id: Service.Media.Remove.ID
    ) => Promise<Service.Media.Remove.Result>;
  };
  priceList: {
    _path: string;
    find: (
      params?: Service.PriceList.Find.Params
    ) => Promise<Service.PriceList.Find.Result>;
    get: (
      id: Service.PriceList.Get.ID
    ) => Promise<Service.PriceList.Get.Result>;
    create: (
      body: Service.PriceList.Create.Body
    ) => Promise<Service.PriceList.Create.Result>;
    update: (
      id: Service.PriceList.Update.ID,
      body: Service.PriceList.Update.Body
    ) => Promise<Service.PriceList.Update.Result>;
    remove: (
      id: Service.PriceList.Remove.ID
    ) => Promise<Service.PriceList.Remove.Result>;
  };
  priceListItem: {
    _path: string;
    find: (
      params?: Service.PriceListItem.Find.Params
    ) => Promise<Service.PriceListItem.Find.Result>;
    get: (
      id: Service.PriceListItem.Get.ID
    ) => Promise<Service.PriceListItem.Get.Result>;
    create: (
      body: Service.PriceListItem.Create.Body
    ) => Promise<Service.PriceListItem.Create.Result>;
    update: (
      id: Service.PriceListItem.Update.ID,
      body: Service.PriceListItem.Update.Body
    ) => Promise<Service.PriceListItem.Update.Result>;
    remove: (
      id: Service.PriceListItem.Remove.ID
    ) => Promise<Service.PriceListItem.Remove.Result>;
  };
  team: {
    _path: string;
    find: (
      params?: Service.Team.Find.Params
    ) => Promise<Service.Team.Find.Result>;
    get: (id: Service.Team.Get.ID) => Promise<Service.Team.Get.Result>;
    create: (
      body: Service.Team.Create.Body
    ) => Promise<Service.Team.Create.Result>;
    update: (
      id: Service.Team.Update.ID,
      body: Service.Team.Update.Body
    ) => Promise<Service.Team.Update.Result>;
    remove: (id: Service.Team.Remove.ID) => Promise<Service.Team.Remove.Result>;
  };
  rep: {
    _path: string;
    find: (
      params?: Service.Rep.Find.Params
    ) => Promise<Service.Rep.Find.Result>;
    get: (
      id: Service.Rep.Get.ID,
      params?: Service.Client.Get.Params
    ) => Promise<Service.Rep.Get.Result>;
    create: (
      body: Service.Rep.Create.Body
    ) => Promise<Service.Rep.Create.Result>;
    update: (
      id: Service.Rep.Update.ID,
      body: Service.Rep.Update.Body
    ) => Promise<Service.Rep.Update.Result>;
    remove: (id: Service.Rep.Remove.ID) => Promise<Service.Rep.Remove.Result>;
  };
  tag: {
    _path: string;
    find: (
      params?: Service.Tag.Find.Params
    ) => Promise<Service.Tag.Find.Result>;
    get: (id: Service.Tag.Get.ID) => Promise<Service.Tag.Get.Result>;
    create: (
      body: Service.Tag.Create.Body
    ) => Promise<Service.Tag.Create.Result>;
    update: (
      id: Service.Tag.Update.ID,
      body: Service.Tag.Update.Body
    ) => Promise<Service.Tag.Update.Result>;
    remove: (id: Service.Tag.Remove.ID) => Promise<Service.Tag.Remove.Result>;
  };
  warehouse: {
    _path: string;
    find: (
      params?: Service.Warehouse.Find.Params
    ) => Promise<Service.Warehouse.Find.Result>;
    get: (
      id: Service.Warehouse.Get.ID
    ) => Promise<Service.Warehouse.Get.Result>;
    create: (
      body: Service.Warehouse.Create.Body
    ) => Promise<Service.Warehouse.Create.Result>;
    update: (
      id: Service.Warehouse.Update.ID,
      body: Service.Warehouse.Update.Body
    ) => Promise<Service.Warehouse.Update.Result>;
    remove: (
      id: Service.Warehouse.Remove.ID
    ) => Promise<Service.Warehouse.Remove.Result>;
  };
  channel: {
    _path: string;
    find: (
      params?: Service.Channel.Find.Params
    ) => Promise<Service.Channel.Find.Result>;
    get: (id: Service.Channel.Get.ID) => Promise<Service.Channel.Get.Result>;
    create: (
      body: Service.Channel.Create.Body
    ) => Promise<Service.Channel.Create.Result>;
    update: (
      id: Service.Channel.Update.ID,
      body: Service.Channel.Update.Body
    ) => Promise<Service.Channel.Update.Result>;
    remove: (
      id: Service.Channel.Remove.ID
    ) => Promise<Service.Channel.Remove.Result>;
  };
  paymentTerm: {
    _path: string;
    find: (
      params?: Service.PaymentTerm.Find.Params
    ) => Promise<Service.PaymentTerm.Find.Result>;
    get: (
      id: Service.PaymentTerm.Get.ID
    ) => Promise<Service.PaymentTerm.Get.Result>;
    create: (
      body: Service.PaymentTerm.Create.Body
    ) => Promise<Service.PaymentTerm.Create.Result>;
    update: (
      id: Service.PaymentTerm.Update.ID,
      body: Service.PaymentTerm.Update.Body
    ) => Promise<Service.PaymentTerm.Update.Result>;
    remove: (
      id: Service.PaymentTerm.Remove.ID
    ) => Promise<Service.PaymentTerm.Remove.Result>;
  };
  bank: {
    _path: string;
    find: (
      params?: Service.Bank.Find.Params
    ) => Promise<Service.Bank.Find.Result>;
    get: (id: Service.Bank.Get.ID) => Promise<Service.Bank.Get.Result>;
    create: (
      body: Service.Bank.Create.Body
    ) => Promise<Service.Bank.Create.Result>;
    update: (
      id: Service.Bank.Update.ID,
      body: Service.Bank.Update.Body
    ) => Promise<Service.Bank.Update.Result>;
  };
  bank_list: {
    _path: string;
    find: (
      params?: Service.BankList.Find.Params
    ) => Promise<Service.BankList.Find.Result>;
    get: (id: Service.BankList.Get.ID) => Promise<Service.BankList.Get.Result>;
    create: (
      body: Service.BankList.Create.Body
    ) => Promise<Service.BankList.Create.Result>;
    update: (
      id: Service.BankList.Update.ID,
      body: Service.BankList.Update.Body
    ) => Promise<Service.BankList.Update.Result>;
  };
  customStatus: {
    _path: string;
    find: (
      params?: Service.CustomStatus.Find.Params
    ) => Promise<Service.CustomStatus.Find.Result>;
    get: (
      id: Service.CustomStatus.Get.ID
    ) => Promise<Service.CustomStatus.Get.Result>;
    create: (
      body: Service.CustomStatus.Create.Body
    ) => Promise<Service.CustomStatus.Create.Result>;
    update: (
      id: Service.CustomStatus.Update.ID,
      body: Service.CustomStatus.Update.Body
    ) => Promise<Service.CustomStatus.Update.Result>;
    remove: (
      id: Service.CustomStatus.Remove.ID
    ) => Promise<Service.CustomStatus.Remove.Result>;
  };
  invoice: {
    _path: string;
    find: (
      params?: Service.FullInvoice.Find.Params
    ) => Promise<Service.FullInvoice.Find.Result>;
    get: (
      id: Service.FullInvoice.Get.ID,
      params?: Service.FullInvoice.Get.Params
    ) => Promise<Service.FullInvoice.Get.Result>;
    create: (
      body: Service.FullInvoice.Create.Body
    ) => Promise<Service.FullInvoice.Create.Result>;
    update: (
      id: Service.FullInvoice.Update.ID,
      body: Service.FullInvoice.Update.Body
    ) => Promise<Service.FullInvoice.Update.Result>;
  };
  proforma: {
    _path: string;
    find: (
      params?: Service.Proforma.Find.Params
    ) => Promise<Service.Proforma.Find.Result>;
    get: (
      id: Service.Proforma.Get.ID,
      params?: Service.Proforma.Get.Params
    ) => Promise<Service.Proforma.Get.Result>;
    create: (
      body: Service.Proforma.Create.Body
    ) => Promise<Service.Proforma.Create.Result>;
    update: (
      id: Service.Proforma.Update.ID,
      body: Service.Proforma.Update.Body
    ) => Promise<Service.Proforma.Update.Result>;
  };
  payment: {
    _path: string;
    find: (
      params?: Service.Payment.Find.Params
    ) => Promise<Service.Payment.Find.Result>;
    get: (
      id: Service.Payment.Get.ID,
      params?: Service.Payment.Get.Params
    ) => Promise<Service.Payment.Get.Result>;
    create: (
      body: Service.Payment.Create.Body
    ) => Promise<Service.Payment.Create.Result>;
    update: (
      id: Service.Payment.Update.ID,
      body: Service.Payment.Update.Body
    ) => Promise<Service.Payment.Update.Result>;
  };
  refund: {
    _path: string;
    find: (
      params?: Service.Refund.Find.Params
    ) => Promise<Service.Refund.Find.Result>;
    get: (
      id: Service.Refund.Get.ID,
      params?: Service.Refund.Get.Params
    ) => Promise<Service.Refund.Get.Result>;
    create: (
      body: Service.Refund.Create.Body
    ) => Promise<Service.Refund.Create.Result>;
    update: (
      id: Service.Refund.Update.ID,
      body: Service.Refund.Update.Body
    ) => Promise<Service.Refund.Update.Result>;
  };
  transfer: {
    _path: string;
    find: (
      params?: Service.Transfer.Find.Params
    ) => Promise<Service.Transfer.Find.Result>;
    get: (
      id: Service.Transfer.Get.ID,
      params?: Service.Transfer.Get.Params
    ) => Promise<Service.Transfer.Get.Result>;
    create: (
      body: Service.Transfer.Create.Body
    ) => Promise<Service.Transfer.Create.Result>;
    update: (
      id: Service.Transfer.Update.ID,
      body: Service.Transfer.Update.Body
    ) => Promise<Service.Transfer.Update.Result>;
  };
  adjustInventory: {
    _path: string;
    find: (
      params?: Service.AdjustInventory.Find.Params
    ) => Promise<Service.AdjustInventory.Find.Result>;
    get: (
      id: Service.AdjustInventory.Get.ID,
      params?: Service.AdjustInventory.Get.Params
    ) => Promise<Service.AdjustInventory.Get.Result>;
    create: (
      body: Service.AdjustInventory.Create.Body
    ) => Promise<Service.AdjustInventory.Create.Result>;
  };
  inventory: {
    _path: string;
    find: (
      params?: Service.Inventory.Find.Params
    ) => Promise<Service.Inventory.Find.Result>;
  };
  integrationApp: {
    _path: string;
    find: (
      params?: Service.App.Find.Params
    ) => Promise<Service.App.Find.Result>;
    get: (
      id: Service.App.Get.ID,
      params?: Service.App.Find.Params
    ) => Promise<Service.App.Get.Result>;
    create: (
      body: Service.App.Create.Body
    ) => Promise<Service.App.Create.Result>;
    update: (
      id: Service.App.Update.ID,
      body: Service.App.Update.Body
    ) => Promise<Service.App.Update.Result>;
  };
  joinActionsWebHook: {
    _path: string;
    update: (
      id: null,
      body: Service.JoinActionsWeHook.Data
    ) => Promise<Service.JoinActionsWeHook.Result>;
  };
  static ActionLogs: {
    new (superThis: Repzo, sync_id: string): {
      _path: string;
      available_app_name: string;
      available_app_id: StringId;
      app_id: StringId;
      action: string;
      status: Service.ActionLogs.Status;
      error?: any;
      start_time: number;
      end_time?: number | undefined;
      total_time?: number | undefined;
      company_namespace?: NameSpaces | undefined;
      body?: any;
      meta?: any;
      message: string;
      details: Service.ActionLogs.Detail[];
      sync_id: string;
      isOld: boolean;
      superThis: Repzo;
      load(sync_id: string): Promise<any>;
      setStatus(status: Service.ActionLogs.Status, error?: any): any;
      setBody(body: any): any;
      setMeta(meta: any): any;
      commit(): Promise<any>;
      addDetail(detail: string, meta?: any): any;
    };
  };
  static CommandLog: {
    new (
      superThis: Repzo,
      app: Service.App.Schema_with_populated_AvailableApp,
      command: string,
      trigger?: string
    ): {
      _path: string;
      available_app_name: string;
      available_app_id: StringId;
      app_id: StringId;
      command: string;
      status: Service.CommandLog.Status;
      error?: any;
      start_time: number;
      end_time?: number | undefined;
      total_time?: number | undefined;
      company_namespace: NameSpaces;
      body?: any;
      meta?: any;
      message: string;
      details: Service.CommandLog.Detail[];
      sync_id: string;
      isOld: boolean;
      priority?: number | undefined;
      isPrioritized: boolean;
      retries: number;
      queuedAt?: Date | undefined;
      failedAt?: Date | undefined;
      succeededAt?: Date | undefined;
      skippedAt?: Date | undefined;
      receivedAt?: Date | undefined;
      processedAt?: Date | undefined;
      onGoing: boolean;
      trigger?: string | undefined;
      superThis: Repzo;
      load(sync_id?: string, retries?: number): Promise<any>;
      setStatus(status: Service.CommandLog.Status, error?: any): any;
      setBody(body: any): any;
      setMeta(meta: any): any;
      commit(): Promise<any>;
      addDetail(detail: string, meta?: any): any;
    };
  };
  patchAction: {
    _path: string;
    create: (
      body: Service.PatchAction.Create.Body,
      params?: Service.PatchAction.Create.Params
    ) => Promise<Service.PatchAction.Create.Result>;
    update: (
      body: Service.PatchAction.Update.Body
    ) => Promise<Service.PatchAction.Update.Result>;
  };
  updateIntegrationMeta: {
    _path: string;
    create: (
      body: Service.UpdateIntegrationMeta.Create.Body,
      params?: Service.UpdateIntegrationMeta.Create.Params
    ) => Promise<Service.UpdateIntegrationMeta.Create.Result>;
  };
}
